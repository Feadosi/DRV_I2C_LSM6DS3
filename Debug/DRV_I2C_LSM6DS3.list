
DRV_I2C_LSM6DS3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d20  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003f00  08003f00  00013f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff0  08003ff0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ff0  08003ff0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ff0  08003ff0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff0  08003ff0  00013ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08004068  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08004068  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f68  00000000  00000000  0002ac4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002cbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002d670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264d2  00000000  00000000  0002e010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dea3  00000000  00000000  000544e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8443  00000000  00000000  00062385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a7c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003160  00000000  00000000  0014a818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003ee8 	.word	0x08003ee8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08003ee8 	.word	0x08003ee8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <LSM6DS3_Init>:
 **                  initializes the accelerometer and gyroscope blocks.
 **  Parametrs     : None
 **  Return        : None
 ** ============================================*/
void LSM6DS3_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  LSM6DS3_SET_ADRESS();
 80002c4:	2200      	movs	r2, #0
 80002c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ce:	f001 f817 	bl	8001300 <HAL_GPIO_WritePin>
  LSM6DS3_SET_INTERFACE();
 80002d2:	2201      	movs	r2, #1
 80002d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f001 f810 	bl	8001300 <HAL_GPIO_WritePin>
  LSM6DS3_ACCEL_Init();
 80002e0:	f000 f804 	bl	80002ec <LSM6DS3_ACCEL_Init>
  LSM6DS3_GYRO_Init();
 80002e4:	f000 f8e8 	bl	80004b8 <LSM6DS3_GYRO_Init>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <LSM6DS3_ACCEL_Init>:
 **                  - Finally sets ODR to 104 Hz
 **  Parametrs     : None
 **  Return        : None
 ** ============================================*/
void LSM6DS3_ACCEL_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	71fb      	strb	r3, [r7, #7]

  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_CTRL3_C);
 80002f6:	2012      	movs	r0, #18
 80002f8:	f000 f9d2 	bl	80006a0 <LSM6DS3_ReadRegister>
 80002fc:	4603      	mov	r3, r0
 80002fe:	71fb      	strb	r3, [r7, #7]
  value &= ~LSM6DS3_ACC_GYRO_IF_INC_MASK;
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	f023 0304 	bic.w	r3, r3, #4
 8000306:	71fb      	strb	r3, [r7, #7]
  value |= LSM6DS3_ACC_GYRO_IF_INC_ENABLED;
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	71fb      	strb	r3, [r7, #7]
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_CTRL3_C, value);
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	4619      	mov	r1, r3
 8000314:	2012      	movs	r0, #18
 8000316:	f000 f9e9 	bl	80006ec <LSM6DS3_WirteRegister>
  // BDU
  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_CTRL3_C);
 800031a:	2012      	movs	r0, #18
 800031c:	f000 f9c0 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000320:	4603      	mov	r3, r0
 8000322:	71fb      	strb	r3, [r7, #7]
  value &= ~LSM6DS3_ACC_GYRO_BDU_MASK;
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800032a:	71fb      	strb	r3, [r7, #7]
  value |= LSM6DS3_ACC_GYRO_BDU_BLOCK_UPDATE;
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000332:	71fb      	strb	r3, [r7, #7]
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_CTRL3_C, value);
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	4619      	mov	r1, r3
 8000338:	2012      	movs	r0, #18
 800033a:	f000 f9d7 	bl	80006ec <LSM6DS3_WirteRegister>
  // FIFO
  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_FIFO_CTRL5);
 800033e:	200a      	movs	r0, #10
 8000340:	f000 f9ae 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000344:	4603      	mov	r3, r0
 8000346:	71fb      	strb	r3, [r7, #7]
  value &= ~LSM6DS3_ACC_GYRO_FIFO_MODE_MASK;
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	f023 0307 	bic.w	r3, r3, #7
 800034e:	71fb      	strb	r3, [r7, #7]
  value |= LSM6DS3_ACC_GYRO_FIFO_MODE_BYPASS;
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_FIFO_CTRL5, value);
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	4619      	mov	r1, r3
 8000354:	200a      	movs	r0, #10
 8000356:	f000 f9c9 	bl	80006ec <LSM6DS3_WirteRegister>
  // (ODR_XL = 0000)
  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_CTRL1_XL);
 800035a:	2010      	movs	r0, #16
 800035c:	f000 f9a0 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000360:	4603      	mov	r3, r0
 8000362:	71fb      	strb	r3, [r7, #7]
  value &= ~LSM6DS3_ACC_GYRO_ODR_XL_MASK;
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	f003 030f 	and.w	r3, r3, #15
 800036a:	71fb      	strb	r3, [r7, #7]
  value |= LSM6DS3_ACC_GYRO_ODR_XL_POWER_DOWN;
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_CTRL1_XL, value);
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	4619      	mov	r1, r3
 8000370:	2010      	movs	r0, #16
 8000372:	f000 f9bb 	bl	80006ec <LSM6DS3_WirteRegister>
  // Full scale selection 2G
  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_CTRL1_XL);
 8000376:	2010      	movs	r0, #16
 8000378:	f000 f992 	bl	80006a0 <LSM6DS3_ReadRegister>
 800037c:	4603      	mov	r3, r0
 800037e:	71fb      	strb	r3, [r7, #7]
  value &= ~LSM6DS3_ACC_GYRO_FS_XL_MASK;
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	f023 030c 	bic.w	r3, r3, #12
 8000386:	71fb      	strb	r3, [r7, #7]
  value |= LSM6DS3_ACC_GYRO_FS_XL_2g;
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_CTRL1_XL, value);
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	4619      	mov	r1, r3
 800038c:	2010      	movs	r0, #16
 800038e:	f000 f9ad 	bl	80006ec <LSM6DS3_WirteRegister>

  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_CTRL9_XL);
 8000392:	2018      	movs	r0, #24
 8000394:	f000 f984 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000398:	4603      	mov	r3, r0
 800039a:	71fb      	strb	r3, [r7, #7]
  value &= ~( LSM6DS3_ACC_GYRO_XEN_XL_MASK |\
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80003a2:	71fb      	strb	r3, [r7, #7]
              LSM6DS3_ACC_GYRO_YEN_XL_MASK |\
              LSM6DS3_ACC_GYRO_ZEN_XL_MASK);
  value |= (  LSM6DS3_ACC_GYRO_XEN_XL_ENABLED |\
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80003aa:	71fb      	strb	r3, [r7, #7]
              LSM6DS3_ACC_GYRO_YEN_XL_ENABLED |\
              LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED);
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_CTRL9_XL, value);
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	4619      	mov	r1, r3
 80003b0:	2018      	movs	r0, #24
 80003b2:	f000 f99b 	bl	80006ec <LSM6DS3_WirteRegister>

  // Sets data rate 119
  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_CTRL1_XL);
 80003b6:	2010      	movs	r0, #16
 80003b8:	f000 f972 	bl	80006a0 <LSM6DS3_ReadRegister>
 80003bc:	4603      	mov	r3, r0
 80003be:	71fb      	strb	r3, [r7, #7]
  value &= ~LSM6DS3_ACC_GYRO_ODR_XL_MASK;
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	f003 030f 	and.w	r3, r3, #15
 80003c6:	71fb      	strb	r3, [r7, #7]
  value |= LSM6DS3_ACC_GYRO_ODR_XL_104Hz;
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ce:	71fb      	strb	r3, [r7, #7]
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_CTRL1_XL, value);
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	4619      	mov	r1, r3
 80003d4:	2010      	movs	r0, #16
 80003d6:	f000 f989 	bl	80006ec <LSM6DS3_WirteRegister>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <LSM6DS3_ACCEL_Read>:
 **                  them to the console as signed 16-bit integers.
 **  Parametrs     : None
 **  Return        : None
 ** ============================================*/
void LSM6DS3_ACCEL_Read(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
  int16_t buffer[3] = { 0 };
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	809a      	strh	r2, [r3, #4]
  int16_t axval, ayval, azval;

  LSM6DS3_ACCEL_GetXYZ(buffer);
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f815 	bl	8000424 <LSM6DS3_ACCEL_GetXYZ>
  axval = buffer[0];
 80003fa:	88bb      	ldrh	r3, [r7, #4]
 80003fc:	81fb      	strh	r3, [r7, #14]
  ayval = buffer[1];
 80003fe:	88fb      	ldrh	r3, [r7, #6]
 8000400:	81bb      	strh	r3, [r7, #12]
  azval = buffer[2];
 8000402:	893b      	ldrh	r3, [r7, #8]
 8000404:	817b      	strh	r3, [r7, #10]
  printf("axval = %d; ayval = %d; azval = %d\n", axval, ayval, azval);
 8000406:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800040a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800040e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000412:	4803      	ldr	r0, [pc, #12]	; (8000420 <LSM6DS3_ACCEL_Read+0x3c>)
 8000414:	f002 fdda 	bl	8002fcc <iprintf>
}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	08003f00 	.word	0x08003f00

08000424 <LSM6DS3_ACCEL_GetXYZ>:
 **  Parametrs     : pData - Pointer to an array of 3 int16_t where
 **                           the read X/Y/Z samples will be stored.
 **  Return        : None
 ** ============================================*/
void LSM6DS3_ACCEL_GetXYZ(int16_t *pData)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  uint8_t buffer[6];
  uint8_t i = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	73fb      	strb	r3, [r7, #15]

  buffer[0] = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_OUTX_L_XL);
 8000430:	2028      	movs	r0, #40	; 0x28
 8000432:	f000 f935 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000436:	4603      	mov	r3, r0
 8000438:	723b      	strb	r3, [r7, #8]
  buffer[1] = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_OUTX_H_XL);
 800043a:	2029      	movs	r0, #41	; 0x29
 800043c:	f000 f930 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000440:	4603      	mov	r3, r0
 8000442:	727b      	strb	r3, [r7, #9]
  buffer[2] = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_OUTY_L_XL);
 8000444:	202a      	movs	r0, #42	; 0x2a
 8000446:	f000 f92b 	bl	80006a0 <LSM6DS3_ReadRegister>
 800044a:	4603      	mov	r3, r0
 800044c:	72bb      	strb	r3, [r7, #10]
  buffer[3] = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_OUTY_H_XL);
 800044e:	202b      	movs	r0, #43	; 0x2b
 8000450:	f000 f926 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000454:	4603      	mov	r3, r0
 8000456:	72fb      	strb	r3, [r7, #11]
  buffer[4] = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_OUTZ_L_XL);
 8000458:	202c      	movs	r0, #44	; 0x2c
 800045a:	f000 f921 	bl	80006a0 <LSM6DS3_ReadRegister>
 800045e:	4603      	mov	r3, r0
 8000460:	733b      	strb	r3, [r7, #12]
  buffer[5] = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_OUTZ_H_XL);
 8000462:	202d      	movs	r0, #45	; 0x2d
 8000464:	f000 f91c 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000468:	4603      	mov	r3, r0
 800046a:	737b      	strb	r3, [r7, #13]
  for (i = 0; i < 3; i++)
 800046c:	2300      	movs	r3, #0
 800046e:	73fb      	strb	r3, [r7, #15]
 8000470:	e01a      	b.n	80004a8 <LSM6DS3_ACCEL_GetXYZ+0x84>
  {
    pData[i] = ((int16_t) ((uint16_t) buffer[2 * i + 1] << 8) + buffer[2 * i]);
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	3301      	adds	r3, #1
 8000478:	3310      	adds	r3, #16
 800047a:	443b      	add	r3, r7
 800047c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000480:	021b      	lsls	r3, r3, #8
 8000482:	b29a      	uxth	r2, r3
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	3310      	adds	r3, #16
 800048a:	443b      	add	r3, r7
 800048c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000490:	b29b      	uxth	r3, r3
 8000492:	4413      	add	r3, r2
 8000494:	b299      	uxth	r1, r3
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	4413      	add	r3, r2
 800049e:	b20a      	sxth	r2, r1
 80004a0:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < 3; i++)
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	3301      	adds	r3, #1
 80004a6:	73fb      	strb	r3, [r7, #15]
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d9e1      	bls.n	8000472 <LSM6DS3_ACCEL_GetXYZ+0x4e>
  }
}
 80004ae:	bf00      	nop
 80004b0:	bf00      	nop
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <LSM6DS3_GYRO_Init>:
 **                  - Finally sets ODR (see code path) before running
 **  Parametrs     : None
 **  Return        : None
 ** ============================================*/
void LSM6DS3_GYRO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	71fb      	strb	r3, [r7, #7]

  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_CTRL3_C);
 80004c2:	2012      	movs	r0, #18
 80004c4:	f000 f8ec 	bl	80006a0 <LSM6DS3_ReadRegister>
 80004c8:	4603      	mov	r3, r0
 80004ca:	71fb      	strb	r3, [r7, #7]
  value &= ~LSM6DS3_ACC_GYRO_IF_INC_MASK;
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	f023 0304 	bic.w	r3, r3, #4
 80004d2:	71fb      	strb	r3, [r7, #7]
  value |= LSM6DS3_ACC_GYRO_IF_INC_ENABLED;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	71fb      	strb	r3, [r7, #7]
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_CTRL3_C, value);
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	4619      	mov	r1, r3
 80004e0:	2012      	movs	r0, #18
 80004e2:	f000 f903 	bl	80006ec <LSM6DS3_WirteRegister>
  // BDU
  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_CTRL3_C);
 80004e6:	2012      	movs	r0, #18
 80004e8:	f000 f8da 	bl	80006a0 <LSM6DS3_ReadRegister>
 80004ec:	4603      	mov	r3, r0
 80004ee:	71fb      	strb	r3, [r7, #7]
  value &= ~LSM6DS3_ACC_GYRO_BDU_MASK;
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004f6:	71fb      	strb	r3, [r7, #7]
  value |= LSM6DS3_ACC_GYRO_BDU_BLOCK_UPDATE;
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004fe:	71fb      	strb	r3, [r7, #7]
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_CTRL3_C, value);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	4619      	mov	r1, r3
 8000504:	2012      	movs	r0, #18
 8000506:	f000 f8f1 	bl	80006ec <LSM6DS3_WirteRegister>
  // FIFO
  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_FIFO_CTRL5);
 800050a:	200a      	movs	r0, #10
 800050c:	f000 f8c8 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000510:	4603      	mov	r3, r0
 8000512:	71fb      	strb	r3, [r7, #7]
  value &= ~LSM6DS3_ACC_GYRO_FIFO_MODE_MASK;
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	f023 0307 	bic.w	r3, r3, #7
 800051a:	71fb      	strb	r3, [r7, #7]
  value |= LSM6DS3_ACC_GYRO_FIFO_MODE_BYPASS;
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_FIFO_CTRL5, value);
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	4619      	mov	r1, r3
 8000520:	200a      	movs	r0, #10
 8000522:	f000 f8e3 	bl	80006ec <LSM6DS3_WirteRegister>
  // (ODR_G = 0000)
  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_CTRL2_G);
 8000526:	2011      	movs	r0, #17
 8000528:	f000 f8ba 	bl	80006a0 <LSM6DS3_ReadRegister>
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
  value &= ~LSM6DS3_ACC_GYRO_ODR_G_MASK;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	f003 030f 	and.w	r3, r3, #15
 8000536:	71fb      	strb	r3, [r7, #7]
  value |= LSM6DS3_ACC_GYRO_ODR_G_POWER_DOWN;
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_CTRL2_G, value);
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4619      	mov	r1, r3
 800053c:	2011      	movs	r0, #17
 800053e:	f000 f8d5 	bl	80006ec <LSM6DS3_WirteRegister>
  // Full scale selection 500 dps
  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_CTRL2_G);
 8000542:	2011      	movs	r0, #17
 8000544:	f000 f8ac 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000548:	4603      	mov	r3, r0
 800054a:	71fb      	strb	r3, [r7, #7]
  value &= ~LSM6DS3_ACC_GYRO_FS_G_500dps;
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	f023 0304 	bic.w	r3, r3, #4
 8000552:	71fb      	strb	r3, [r7, #7]
  value |= LSM6DS3_ACC_GYRO_FS_XL_2g;
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_CTRL2_G, value);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4619      	mov	r1, r3
 8000558:	2011      	movs	r0, #17
 800055a:	f000 f8c7 	bl	80006ec <LSM6DS3_WirteRegister>
  //
  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_CTRL10_C);
 800055e:	2019      	movs	r0, #25
 8000560:	f000 f89e 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000564:	4603      	mov	r3, r0
 8000566:	71fb      	strb	r3, [r7, #7]
  value &= ~( LSM6DS3_ACC_GYRO_XEN_G_MASK |\
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800056e:	71fb      	strb	r3, [r7, #7]
              LSM6DS3_ACC_GYRO_YEN_G_MASK |\
              LSM6DS3_ACC_GYRO_ZEN_G_MASK);
  value |= (  LSM6DS3_ACC_GYRO_XEN_G_ENABLED |\
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8000576:	71fb      	strb	r3, [r7, #7]
              LSM6DS3_ACC_GYRO_YEN_G_ENABLED |\
              LSM6DS3_ACC_GYRO_ZEN_G_ENABLED);
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_CTRL10_C, value);
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4619      	mov	r1, r3
 800057c:	2019      	movs	r0, #25
 800057e:	f000 f8b5 	bl	80006ec <LSM6DS3_WirteRegister>
  // Data Rate 833
  value = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_CTRL2_G);
 8000582:	2011      	movs	r0, #17
 8000584:	f000 f88c 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000588:	4603      	mov	r3, r0
 800058a:	71fb      	strb	r3, [r7, #7]
  value &= ~LSM6DS3_ACC_GYRO_ODR_G_833Hz;
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000592:	71fb      	strb	r3, [r7, #7]
  value |= LSM6DS3_ACC_GYRO_ODR_XL_104Hz;
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800059a:	71fb      	strb	r3, [r7, #7]
  LSM6DS3_WirteRegister(LSM6DS3_ACC_GYRO_CTRL2_G, value);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4619      	mov	r1, r3
 80005a0:	2011      	movs	r0, #17
 80005a2:	f000 f8a3 	bl	80006ec <LSM6DS3_WirteRegister>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <LSM6DS3_Gyro_Read>:
 **                  the corrected values as signed 16-bit integers.
 **  Parametrs     : None
 **  Return        : None
 ** ============================================*/
void LSM6DS3_Gyro_Read(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
  int16_t buffer[3] = { 0 };
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	809a      	strh	r2, [r3, #4]
  int16_t gxval, gyval, gzval;

  LSM6DS3_GYRO_GetXYZ(buffer);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f823 	bl	800060c <LSM6DS3_GYRO_GetXYZ>
  gxval = buffer[0] - 88;
 80005c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	3b58      	subs	r3, #88	; 0x58
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	81fb      	strh	r3, [r7, #14]
  if (gxval < -32768) gxval = -32768;
  gyval = buffer[1] + 325;
 80005d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	f203 1345 	addw	r3, r3, #325	; 0x145
 80005dc:	b29b      	uxth	r3, r3
 80005de:	81bb      	strh	r3, [r7, #12]
  if (gyval > 32767) gyval = 32767;
  gzval = buffer[2] + 135;
 80005e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	3387      	adds	r3, #135	; 0x87
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	817b      	strh	r3, [r7, #10]
  if (gzval > 32767) gzval = 32767;
  printf("gxval = %d; gyval = %d; gzval = %d\n", gxval, gyval, gzval);
 80005ec:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80005f0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80005f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <LSM6DS3_Gyro_Read+0x58>)
 80005fa:	f002 fce7 	bl	8002fcc <iprintf>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	08003f24 	.word	0x08003f24

0800060c <LSM6DS3_GYRO_GetXYZ>:
 **  Parametrs     : pData - Pointer to an array of 3 int16_t where
 **                           the read X/Y/Z samples will be stored.
 **  Return        : None
 ** ============================================*/
void LSM6DS3_GYRO_GetXYZ(int16_t *pData)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	73fb      	strb	r3, [r7, #15]

  buffer[0] = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_OUTX_L_G);
 8000618:	2022      	movs	r0, #34	; 0x22
 800061a:	f000 f841 	bl	80006a0 <LSM6DS3_ReadRegister>
 800061e:	4603      	mov	r3, r0
 8000620:	723b      	strb	r3, [r7, #8]
  buffer[1] = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_OUTX_H_G);
 8000622:	2023      	movs	r0, #35	; 0x23
 8000624:	f000 f83c 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000628:	4603      	mov	r3, r0
 800062a:	727b      	strb	r3, [r7, #9]
  buffer[2] = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_OUTY_L_G);
 800062c:	2024      	movs	r0, #36	; 0x24
 800062e:	f000 f837 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000632:	4603      	mov	r3, r0
 8000634:	72bb      	strb	r3, [r7, #10]
  buffer[3] = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_OUTY_H_G);
 8000636:	2025      	movs	r0, #37	; 0x25
 8000638:	f000 f832 	bl	80006a0 <LSM6DS3_ReadRegister>
 800063c:	4603      	mov	r3, r0
 800063e:	72fb      	strb	r3, [r7, #11]
  buffer[4] = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_OUTZ_L_G);
 8000640:	2026      	movs	r0, #38	; 0x26
 8000642:	f000 f82d 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000646:	4603      	mov	r3, r0
 8000648:	733b      	strb	r3, [r7, #12]
  buffer[5] = LSM6DS3_ReadRegister(LSM6DS3_ACC_GYRO_OUTZ_H_G);
 800064a:	2027      	movs	r0, #39	; 0x27
 800064c:	f000 f828 	bl	80006a0 <LSM6DS3_ReadRegister>
 8000650:	4603      	mov	r3, r0
 8000652:	737b      	strb	r3, [r7, #13]
  for (i = 0; i < 3; i++)
 8000654:	2300      	movs	r3, #0
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	e01a      	b.n	8000690 <LSM6DS3_GYRO_GetXYZ+0x84>
  {
    pData[i] = ((int16_t) ((uint16_t) buffer[2 * i + 1] << 8) + buffer[2 * i]);
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	3301      	adds	r3, #1
 8000660:	3310      	adds	r3, #16
 8000662:	443b      	add	r3, r7
 8000664:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	b29a      	uxth	r2, r3
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	3310      	adds	r3, #16
 8000672:	443b      	add	r3, r7
 8000674:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000678:	b29b      	uxth	r3, r3
 800067a:	4413      	add	r3, r2
 800067c:	b299      	uxth	r1, r3
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	b20a      	sxth	r2, r1
 8000688:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < 3; i++)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	3301      	adds	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	2b02      	cmp	r3, #2
 8000694:	d9e1      	bls.n	800065a <LSM6DS3_GYRO_GetXYZ+0x4e>
  }
}
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <LSM6DS3_ReadRegister>:
 **                  Calls the error handler on HAL failure.
 **  Parametrs     : reg    - 8-bit register address to read.
 **  Return        : value  - read from the given register.
 ** ============================================*/
uint8_t LSM6DS3_ReadRegister(uint8_t reg)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af04      	add	r7, sp, #16
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&hi2c1, LSM6DS3_DEVICE_ADRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ba:	9302      	str	r3, [sp, #8]
 80006bc:	2301      	movs	r3, #1
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	f107 030e 	add.w	r3, r7, #14
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2301      	movs	r3, #1
 80006c8:	21d4      	movs	r1, #212	; 0xd4
 80006ca:	4807      	ldr	r0, [pc, #28]	; (80006e8 <LSM6DS3_ReadRegister+0x48>)
 80006cc:	f000 ffe0 	bl	8001690 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK)
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <LSM6DS3_ReadRegister+0x3e>
    LSM6DS3_Error();
 80006da:	f000 f82d 	bl	8000738 <LSM6DS3_Error>
  return value;
 80006de:	7bbb      	ldrb	r3, [r7, #14]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000008c 	.word	0x2000008c

080006ec <LSM6DS3_WirteRegister>:
 **  Parametrs     : reg    - 8-bit register address to write.
 **                  value  - 8-bit value to be written to the register.
 **  Return        : None
 ** ============================================*/
void LSM6DS3_WirteRegister(uint8_t reg, uint8_t value)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af04      	add	r7, sp, #16
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&hi2c1, LSM6DS3_DEVICE_ADRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	b29a      	uxth	r2, r3
 8000704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000708:	9302      	str	r3, [sp, #8]
 800070a:	2301      	movs	r3, #1
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	1dbb      	adds	r3, r7, #6
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2301      	movs	r3, #1
 8000714:	21d4      	movs	r1, #212	; 0xd4
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <LSM6DS3_WirteRegister+0x48>)
 8000718:	f000 fea6 	bl	8001468 <HAL_I2C_Mem_Write>
 800071c:	4603      	mov	r3, r0
 800071e:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK)
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <LSM6DS3_WirteRegister+0x3e>
    LSM6DS3_Error();
 8000726:	f000 f807 	bl	8000738 <LSM6DS3_Error>
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000008c 	.word	0x2000008c

08000738 <LSM6DS3_Error>:
 **                  Currently signals an error using the board LED macro.
 **  Parametrs     : None
 **  Return        : None
 ** ============================================*/
void LSM6DS3_Error(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  LSM6DS3_LED_BOARD(LSM6DS3_ON);
 800073c:	2201      	movs	r2, #1
 800073e:	2140      	movs	r1, #64	; 0x40
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <LSM6DS3_Error+0x14>)
 8000742:	f000 fddd 	bl	8001300 <HAL_GPIO_WritePin>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	48000800 	.word	0x48000800

08000750 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <MX_GPIO_Init+0xd4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a2e      	ldr	r2, [pc, #184]	; (8000824 <MX_GPIO_Init+0xd4>)
 800076c:	f043 0320 	orr.w	r3, r3, #32
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <MX_GPIO_Init+0xd4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0320 	and.w	r3, r3, #32
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b29      	ldr	r3, [pc, #164]	; (8000824 <MX_GPIO_Init+0xd4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a28      	ldr	r2, [pc, #160]	; (8000824 <MX_GPIO_Init+0xd4>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <MX_GPIO_Init+0xd4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_GPIO_Init+0xd4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a22      	ldr	r2, [pc, #136]	; (8000824 <MX_GPIO_Init+0xd4>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_GPIO_Init+0xd4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_GPIO_Init+0xd4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_GPIO_Init+0xd4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_GPIO_Init+0xd4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_USER_LED_GPIO_Port, BOARD_USER_LED_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	4817      	ldr	r0, [pc, #92]	; (8000828 <MX_GPIO_Init+0xd8>)
 80007cc:	f000 fd98 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SAD_Pin|CS_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007da:	f000 fd91 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOARD_USER_LED_Pin;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BOARD_USER_LED_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <MX_GPIO_Init+0xd8>)
 80007f6:	f000 fc01 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SAD_Pin|CS_Pin;
 80007fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000816:	f000 fbf1 	bl	8000ffc <HAL_GPIO_Init>

}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000
 8000828:	48000800 	.word	0x48000800

0800082c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000832:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <MX_I2C1_Init+0x78>)
 8000834:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x009053BB;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <MX_I2C1_Init+0x7c>)
 800083a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000844:	2201      	movs	r2, #1
 8000846:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_I2C1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <MX_I2C1_Init+0x74>)
 8000868:	f000 fd62 	bl	8001330 <HAL_I2C_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000872:	f000 f935 	bl	8000ae0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000876:	2100      	movs	r1, #0
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <MX_I2C1_Init+0x74>)
 800087a:	f001 fae5 	bl	8001e48 <HAL_I2CEx_ConfigAnalogFilter>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000884:	f000 f92c 	bl	8000ae0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000888:	2100      	movs	r1, #0
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_I2C1_Init+0x74>)
 800088c:	f001 fb27 	bl	8001ede <HAL_I2CEx_ConfigDigitalFilter>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000896:	f000 f923 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000008c 	.word	0x2000008c
 80008a4:	40005400 	.word	0x40005400
 80008a8:	009053bb 	.word	0x009053bb

080008ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0a0      	sub	sp, #128	; 0x80
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	f107 0318 	add.w	r3, r7, #24
 80008c8:	2254      	movs	r2, #84	; 0x54
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fb75 	bl	8002fbc <memset>
  if(i2cHandle->Instance==I2C1)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a2d      	ldr	r2, [pc, #180]	; (800098c <HAL_I2C_MspInit+0xe0>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d153      	bne.n	8000984 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 f8ef 	bl	8002acc <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008f4:	f000 f8f4 	bl	8000ae0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b25      	ldr	r3, [pc, #148]	; (8000990 <HAL_I2C_MspInit+0xe4>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fc:	4a24      	ldr	r2, [pc, #144]	; (8000990 <HAL_I2C_MspInit+0xe4>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <HAL_I2C_MspInit+0xe4>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <HAL_I2C_MspInit+0xe4>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000914:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <HAL_I2C_MspInit+0xe4>)
 8000916:	f043 0302 	orr.w	r3, r3, #2
 800091a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_I2C_MspInit+0xe4>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	f003 0302 	and.w	r3, r3, #2
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800092c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092e:	2312      	movs	r3, #18
 8000930:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800093a:	2304      	movs	r3, #4
 800093c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fb58 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000950:	2312      	movs	r3, #18
 8000952:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095c:	2304      	movs	r3, #4
 800095e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000964:	4619      	mov	r1, r3
 8000966:	480b      	ldr	r0, [pc, #44]	; (8000994 <HAL_I2C_MspInit+0xe8>)
 8000968:	f000 fb48 	bl	8000ffc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_I2C_MspInit+0xe4>)
 800096e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_I2C_MspInit+0xe4>)
 8000972:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000976:	6593      	str	r3, [r2, #88]	; 0x58
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_I2C_MspInit+0xe4>)
 800097a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000984:	bf00      	nop
 8000986:	3780      	adds	r7, #128	; 0x80
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40005400 	.word	0x40005400
 8000990:	40021000 	.word	0x40021000
 8000994:	48000400 	.word	0x48000400

08000998 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009a4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d013      	beq.n	80009d8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009b4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80009b8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00b      	beq.n	80009d8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009c0:	e000      	b.n	80009c4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80009c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0f9      	beq.n	80009c2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ea:	f000 f990 	bl	8000d0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ee:	f000 f811 	bl	8000a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f2:	f7ff fead 	bl	8000750 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009f6:	f7ff ff19 	bl	800082c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LSM6DS3_Init();
 80009fa:	f7ff fc61 	bl	80002c0 <LSM6DS3_Init>
  HAL_Delay(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 f9f6 	bl	8000df0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LSM6DS3_ACCEL_Read();
 8000a04:	f7ff fcee 	bl	80003e4 <LSM6DS3_ACCEL_Read>
    LSM6DS3_Gyro_Read();
 8000a08:	f7ff fdd2 	bl	80005b0 <LSM6DS3_Gyro_Read>
    HAL_Delay(200);
 8000a0c:	20c8      	movs	r0, #200	; 0xc8
 8000a0e:	f000 f9ef 	bl	8000df0 <HAL_Delay>
    LSM6DS3_ACCEL_Read();
 8000a12:	e7f7      	b.n	8000a04 <main+0x1e>

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b094      	sub	sp, #80	; 0x50
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0318 	add.w	r3, r7, #24
 8000a1e:	2238      	movs	r2, #56	; 0x38
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 faca 	bl	8002fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a3a:	f001 fa9d 	bl	8001f78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000a54:	2319      	movs	r3, #25
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fb39 	bl	80020e0 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000a74:	f000 f834 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2103      	movs	r1, #3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fe37 	bl	8002704 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 f820 	bl	8000ae0 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3750      	adds	r7, #80	; 0x50
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_write>:

/* USER CODE BEGIN 4 */
/*--------------------For debug--------------------*/
int _write(int file, uint8_t *ptr, int len)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	e009      	b.n	8000ace <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1c5a      	adds	r2, r3, #1
 8000abe:	60ba      	str	r2, [r7, #8]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff68 	bl	8000998 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	3301      	adds	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	dbf1      	blt.n	8000aba <_write+0x12>
  }
  return len;
 8000ad6:	687b      	ldr	r3, [r7, #4]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_MspInit+0x44>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6613      	str	r3, [r2, #96]	; 0x60
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x44>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b22:	f001 facd 	bl	80020c0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f918 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e00a      	b.n	8000bb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b9a:	f3af 8000 	nop.w
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60ba      	str	r2, [r7, #8]
 8000ba6:	b2ca      	uxtb	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf0      	blt.n	8000b9a <_read+0x12>
  }

  return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bea:	605a      	str	r2, [r3, #4]
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_isatty>:

int _isatty(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f002 f984 	bl	8002f68 <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20020000 	.word	0x20020000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	200000e0 	.word	0x200000e0
 8000c94:	200000f8 	.word	0x200000f8

08000c98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc0:	f7ff ffea 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	; (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	; (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f002 f943 	bl	8002f74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cee:	f7ff fe7a 	bl	80009e6 <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   r0, =_estack
 8000cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d00:	08003ff8 	.word	0x08003ff8
  ldr r2, =_sbss
 8000d04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d08:	200000f8 	.word	0x200000f8

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>

08000d0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f93d 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f000 f80e 	bl	8000d40 <HAL_InitTick>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	e001      	b.n	8000d34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d30:	f7ff fedc 	bl	8000aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d34:	79fb      	ldrb	r3, [r7, #7]

}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_InitTick+0x68>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d022      	beq.n	8000d9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_InitTick+0x6c>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_InitTick+0x68>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f93a 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10f      	bne.n	8000d94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b0f      	cmp	r3, #15
 8000d78:	d809      	bhi.n	8000d8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d82:	f000 f914 	bl	8000fae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_InitTick+0x70>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	e007      	b.n	8000d9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e004      	b.n	8000d9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e001      	b.n	8000d9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dc4:	6013      	str	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	200000e4 	.word	0x200000e4
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200000e4 	.word	0x200000e4

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d004      	beq.n	8000e14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_Delay+0x40>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	4413      	add	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e14:	bf00      	nop
 8000e16:	f7ff ffdf 	bl	8000dd8 <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d8f7      	bhi.n	8000e16 <HAL_Delay+0x26>
  {
  }
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000008 	.word	0x20000008

08000e34 <__NVIC_SetPriorityGrouping>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_SetPriority>:
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff47 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff5e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff90 	bl	8000eec <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5f 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffb2 	bl	8000f54 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800100a:	e15a      	b.n	80012c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	4013      	ands	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 814c 	beq.w	80012bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b01      	cmp	r3, #1
 800102e:	d005      	beq.n	800103c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001038:	2b02      	cmp	r3, #2
 800103a:	d130      	bne.n	800109e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001072:	2201      	movs	r2, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	f003 0201 	and.w	r2, r3, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d017      	beq.n	80010da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d123      	bne.n	800112e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	691a      	ldr	r2, [r3, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	6939      	ldr	r1, [r7, #16]
 800112a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0203 	and.w	r2, r3, #3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 80a6 	beq.w	80012bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001170:	4b5b      	ldr	r3, [pc, #364]	; (80012e0 <HAL_GPIO_Init+0x2e4>)
 8001172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001174:	4a5a      	ldr	r2, [pc, #360]	; (80012e0 <HAL_GPIO_Init+0x2e4>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6613      	str	r3, [r2, #96]	; 0x60
 800117c:	4b58      	ldr	r3, [pc, #352]	; (80012e0 <HAL_GPIO_Init+0x2e4>)
 800117e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001188:	4a56      	ldr	r2, [pc, #344]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011b2:	d01f      	beq.n	80011f4 <HAL_GPIO_Init+0x1f8>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <HAL_GPIO_Init+0x2ec>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d019      	beq.n	80011f0 <HAL_GPIO_Init+0x1f4>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a4b      	ldr	r2, [pc, #300]	; (80012ec <HAL_GPIO_Init+0x2f0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d013      	beq.n	80011ec <HAL_GPIO_Init+0x1f0>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a4a      	ldr	r2, [pc, #296]	; (80012f0 <HAL_GPIO_Init+0x2f4>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d00d      	beq.n	80011e8 <HAL_GPIO_Init+0x1ec>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a49      	ldr	r2, [pc, #292]	; (80012f4 <HAL_GPIO_Init+0x2f8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d007      	beq.n	80011e4 <HAL_GPIO_Init+0x1e8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a48      	ldr	r2, [pc, #288]	; (80012f8 <HAL_GPIO_Init+0x2fc>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d101      	bne.n	80011e0 <HAL_GPIO_Init+0x1e4>
 80011dc:	2305      	movs	r3, #5
 80011de:	e00a      	b.n	80011f6 <HAL_GPIO_Init+0x1fa>
 80011e0:	2306      	movs	r3, #6
 80011e2:	e008      	b.n	80011f6 <HAL_GPIO_Init+0x1fa>
 80011e4:	2304      	movs	r3, #4
 80011e6:	e006      	b.n	80011f6 <HAL_GPIO_Init+0x1fa>
 80011e8:	2303      	movs	r3, #3
 80011ea:	e004      	b.n	80011f6 <HAL_GPIO_Init+0x1fa>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_Init+0x1fa>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_GPIO_Init+0x1fa>
 80011f4:	2300      	movs	r3, #0
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	f002 0203 	and.w	r2, r2, #3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4093      	lsls	r3, r2
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001206:	4937      	ldr	r1, [pc, #220]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001214:	4b39      	ldr	r3, [pc, #228]	; (80012fc <HAL_GPIO_Init+0x300>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001238:	4a30      	ldr	r2, [pc, #192]	; (80012fc <HAL_GPIO_Init+0x300>)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800123e:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_GPIO_Init+0x300>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001262:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_GPIO_Init+0x300>)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_GPIO_Init+0x300>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800128c:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <HAL_GPIO_Init+0x300>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_GPIO_Init+0x300>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_GPIO_Init+0x300>)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3301      	adds	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	fa22 f303 	lsr.w	r3, r2, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f47f ae9d 	bne.w	800100c <HAL_GPIO_Init+0x10>
  }
}
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
 80012d6:	371c      	adds	r7, #28
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000
 80012e8:	48000400 	.word	0x48000400
 80012ec:	48000800 	.word	0x48000800
 80012f0:	48000c00 	.word	0x48000c00
 80012f4:	48001000 	.word	0x48001000
 80012f8:	48001400 	.word	0x48001400
 80012fc:	40010400 	.word	0x40010400

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800131c:	e002      	b.n	8001324 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e08d      	b.n	800145e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff faa8 	bl	80008ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2224      	movs	r2, #36	; 0x24
 8001360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001380:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001390:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d107      	bne.n	80013aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	e006      	b.n	80013b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d108      	bne.n	80013d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	e007      	b.n	80013e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001404:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691a      	ldr	r2, [r3, #16]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69d9      	ldr	r1, [r3, #28]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0201 	orr.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af02      	add	r7, sp, #8
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	4608      	mov	r0, r1
 8001472:	4611      	mov	r1, r2
 8001474:	461a      	mov	r2, r3
 8001476:	4603      	mov	r3, r0
 8001478:	817b      	strh	r3, [r7, #10]
 800147a:	460b      	mov	r3, r1
 800147c:	813b      	strh	r3, [r7, #8]
 800147e:	4613      	mov	r3, r2
 8001480:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b20      	cmp	r3, #32
 800148c:	f040 80f9 	bne.w	8001682 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <HAL_I2C_Mem_Write+0x34>
 8001496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001498:	2b00      	cmp	r3, #0
 800149a:	d105      	bne.n	80014a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0ed      	b.n	8001684 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <HAL_I2C_Mem_Write+0x4e>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e0e6      	b.n	8001684 <HAL_I2C_Mem_Write+0x21c>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014be:	f7ff fc8b 	bl	8000dd8 <HAL_GetTick>
 80014c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2319      	movs	r3, #25
 80014ca:	2201      	movs	r2, #1
 80014cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 fac3 	bl	8001a5c <I2C_WaitOnFlagUntilTimeout>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0d1      	b.n	8001684 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2221      	movs	r2, #33	; 0x21
 80014e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2240      	movs	r2, #64	; 0x40
 80014ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a3a      	ldr	r2, [r7, #32]
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001508:	88f8      	ldrh	r0, [r7, #6]
 800150a:	893a      	ldrh	r2, [r7, #8]
 800150c:	8979      	ldrh	r1, [r7, #10]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	4603      	mov	r3, r0
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 f9d3 	bl	80018c4 <I2C_RequestMemoryWrite>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0a9      	b.n	8001684 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001534:	b29b      	uxth	r3, r3
 8001536:	2bff      	cmp	r3, #255	; 0xff
 8001538:	d90e      	bls.n	8001558 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	22ff      	movs	r2, #255	; 0xff
 800153e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001544:	b2da      	uxtb	r2, r3
 8001546:	8979      	ldrh	r1, [r7, #10]
 8001548:	2300      	movs	r3, #0
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 fc47 	bl	8001de4 <I2C_TransferConfig>
 8001556:	e00f      	b.n	8001578 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001566:	b2da      	uxtb	r2, r3
 8001568:	8979      	ldrh	r1, [r7, #10]
 800156a:	2300      	movs	r3, #0
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 fc36 	bl	8001de4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 fac6 	bl	8001b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e07b      	b.n	8001684 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d034      	beq.n	8001630 <HAL_I2C_Mem_Write+0x1c8>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d130      	bne.n	8001630 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	2200      	movs	r2, #0
 80015d6:	2180      	movs	r1, #128	; 0x80
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 fa3f 	bl	8001a5c <I2C_WaitOnFlagUntilTimeout>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e04d      	b.n	8001684 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2bff      	cmp	r3, #255	; 0xff
 80015f0:	d90e      	bls.n	8001610 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	22ff      	movs	r2, #255	; 0xff
 80015f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	8979      	ldrh	r1, [r7, #10]
 8001600:	2300      	movs	r3, #0
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 fbeb 	bl	8001de4 <I2C_TransferConfig>
 800160e:	e00f      	b.n	8001630 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001614:	b29a      	uxth	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161e:	b2da      	uxtb	r2, r3
 8001620:	8979      	ldrh	r1, [r7, #10]
 8001622:	2300      	movs	r3, #0
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 fbda 	bl	8001de4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001634:	b29b      	uxth	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d19e      	bne.n	8001578 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 faac 	bl	8001b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e01a      	b.n	8001684 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2220      	movs	r2, #32
 8001654:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_I2C_Mem_Write+0x224>)
 8001662:	400b      	ands	r3, r1
 8001664:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2220      	movs	r2, #32
 800166a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	e000      	b.n	8001684 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001682:	2302      	movs	r3, #2
  }
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	fe00e800 	.word	0xfe00e800

08001690 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af02      	add	r7, sp, #8
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	4608      	mov	r0, r1
 800169a:	4611      	mov	r1, r2
 800169c:	461a      	mov	r2, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	817b      	strh	r3, [r7, #10]
 80016a2:	460b      	mov	r3, r1
 80016a4:	813b      	strh	r3, [r7, #8]
 80016a6:	4613      	mov	r3, r2
 80016a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b20      	cmp	r3, #32
 80016b4:	f040 80fd 	bne.w	80018b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <HAL_I2C_Mem_Read+0x34>
 80016be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d105      	bne.n	80016d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0f1      	b.n	80018b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_I2C_Mem_Read+0x4e>
 80016da:	2302      	movs	r3, #2
 80016dc:	e0ea      	b.n	80018b4 <HAL_I2C_Mem_Read+0x224>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016e6:	f7ff fb77 	bl	8000dd8 <HAL_GetTick>
 80016ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2319      	movs	r3, #25
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 f9af 	bl	8001a5c <I2C_WaitOnFlagUntilTimeout>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0d5      	b.n	80018b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2222      	movs	r2, #34	; 0x22
 800170c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2240      	movs	r2, #64	; 0x40
 8001714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a3a      	ldr	r2, [r7, #32]
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001728:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001730:	88f8      	ldrh	r0, [r7, #6]
 8001732:	893a      	ldrh	r2, [r7, #8]
 8001734:	8979      	ldrh	r1, [r7, #10]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4603      	mov	r3, r0
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f000 f913 	bl	800196c <I2C_RequestMemoryRead>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0ad      	b.n	80018b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	2bff      	cmp	r3, #255	; 0xff
 8001760:	d90e      	bls.n	8001780 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	22ff      	movs	r2, #255	; 0xff
 8001766:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176c:	b2da      	uxtb	r2, r3
 800176e:	8979      	ldrh	r1, [r7, #10]
 8001770:	4b52      	ldr	r3, [pc, #328]	; (80018bc <HAL_I2C_Mem_Read+0x22c>)
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f000 fb33 	bl	8001de4 <I2C_TransferConfig>
 800177e:	e00f      	b.n	80017a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001784:	b29a      	uxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178e:	b2da      	uxtb	r2, r3
 8001790:	8979      	ldrh	r1, [r7, #10]
 8001792:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <HAL_I2C_Mem_Read+0x22c>)
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 fb22 	bl	8001de4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a6:	2200      	movs	r2, #0
 80017a8:	2104      	movs	r1, #4
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f956 	bl	8001a5c <I2C_WaitOnFlagUntilTimeout>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e07c      	b.n	80018b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d034      	beq.n	8001860 <HAL_I2C_Mem_Read+0x1d0>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d130      	bne.n	8001860 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	2200      	movs	r2, #0
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f000 f927 	bl	8001a5c <I2C_WaitOnFlagUntilTimeout>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e04d      	b.n	80018b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181c:	b29b      	uxth	r3, r3
 800181e:	2bff      	cmp	r3, #255	; 0xff
 8001820:	d90e      	bls.n	8001840 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	22ff      	movs	r2, #255	; 0xff
 8001826:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182c:	b2da      	uxtb	r2, r3
 800182e:	8979      	ldrh	r1, [r7, #10]
 8001830:	2300      	movs	r3, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 fad3 	bl	8001de4 <I2C_TransferConfig>
 800183e:	e00f      	b.n	8001860 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	b2da      	uxtb	r2, r3
 8001850:	8979      	ldrh	r1, [r7, #10]
 8001852:	2300      	movs	r3, #0
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 fac2 	bl	8001de4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001864:	b29b      	uxth	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d19a      	bne.n	80017a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f994 	bl	8001b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e01a      	b.n	80018b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2220      	movs	r2, #32
 8001884:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_I2C_Mem_Read+0x230>)
 8001892:	400b      	ands	r3, r1
 8001894:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80018b2:	2302      	movs	r3, #2
  }
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	80002400 	.word	0x80002400
 80018c0:	fe00e800 	.word	0xfe00e800

080018c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	817b      	strh	r3, [r7, #10]
 80018d6:	460b      	mov	r3, r1
 80018d8:	813b      	strh	r3, [r7, #8]
 80018da:	4613      	mov	r3, r2
 80018dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	8979      	ldrh	r1, [r7, #10]
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <I2C_RequestMemoryWrite+0xa4>)
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 fa79 	bl	8001de4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	69b9      	ldr	r1, [r7, #24]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f909 	bl	8001b0e <I2C_WaitOnTXISFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e02c      	b.n	8001960 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800190c:	893b      	ldrh	r3, [r7, #8]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
 8001916:	e015      	b.n	8001944 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001918:	893b      	ldrh	r3, [r7, #8]
 800191a:	0a1b      	lsrs	r3, r3, #8
 800191c:	b29b      	uxth	r3, r3
 800191e:	b2da      	uxtb	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	69b9      	ldr	r1, [r7, #24]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f8ef 	bl	8001b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e012      	b.n	8001960 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800193a:	893b      	ldrh	r3, [r7, #8]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2200      	movs	r2, #0
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f884 	bl	8001a5c <I2C_WaitOnFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	80002000 	.word	0x80002000

0800196c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af02      	add	r7, sp, #8
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	4608      	mov	r0, r1
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4603      	mov	r3, r0
 800197c:	817b      	strh	r3, [r7, #10]
 800197e:	460b      	mov	r3, r1
 8001980:	813b      	strh	r3, [r7, #8]
 8001982:	4613      	mov	r3, r2
 8001984:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	8979      	ldrh	r1, [r7, #10]
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <I2C_RequestMemoryRead+0xa4>)
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2300      	movs	r3, #0
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fa26 	bl	8001de4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	69b9      	ldr	r1, [r7, #24]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f8b6 	bl	8001b0e <I2C_WaitOnTXISFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e02c      	b.n	8001a06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d105      	bne.n	80019be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019b2:	893b      	ldrh	r3, [r7, #8]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
 80019bc:	e015      	b.n	80019ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019be:	893b      	ldrh	r3, [r7, #8]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 f89c 	bl	8001b0e <I2C_WaitOnTXISFlagUntilTimeout>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e012      	b.n	8001a06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019e0:	893b      	ldrh	r3, [r7, #8]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2200      	movs	r2, #0
 80019f2:	2140      	movs	r1, #64	; 0x40
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 f831 	bl	8001a5c <I2C_WaitOnFlagUntilTimeout>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	80002000 	.word	0x80002000

08001a14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d103      	bne.n	8001a32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d007      	beq.n	8001a50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699a      	ldr	r2, [r3, #24]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	619a      	str	r2, [r3, #24]
  }
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a6c:	e03b      	b.n	8001ae6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	6839      	ldr	r1, [r7, #0]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 f8d6 	bl	8001c24 <I2C_IsErrorOccurred>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e041      	b.n	8001b06 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d02d      	beq.n	8001ae6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8a:	f7ff f9a5 	bl	8000dd8 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d302      	bcc.n	8001aa0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d122      	bne.n	8001ae6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d113      	bne.n	8001ae6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f043 0220 	orr.w	r2, r3, #32
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2220      	movs	r2, #32
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00f      	b.n	8001b06 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699a      	ldr	r2, [r3, #24]
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4013      	ands	r3, r2
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	bf0c      	ite	eq
 8001af6:	2301      	moveq	r3, #1
 8001af8:	2300      	movne	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d0b4      	beq.n	8001a6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b1a:	e033      	b.n	8001b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f87f 	bl	8001c24 <I2C_IsErrorOccurred>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e031      	b.n	8001b94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b36:	d025      	beq.n	8001b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b38:	f7ff f94e 	bl	8000dd8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d302      	bcc.n	8001b4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d11a      	bne.n	8001b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d013      	beq.n	8001b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	f043 0220 	orr.w	r2, r3, #32
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e007      	b.n	8001b94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d1c4      	bne.n	8001b1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba8:	e02f      	b.n	8001c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f838 	bl	8001c24 <I2C_IsErrorOccurred>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e02d      	b.n	8001c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bbe:	f7ff f90b 	bl	8000dd8 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d302      	bcc.n	8001bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d11a      	bne.n	8001c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d013      	beq.n	8001c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f043 0220 	orr.w	r2, r3, #32
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e007      	b.n	8001c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	d1c8      	bne.n	8001baa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d068      	beq.n	8001d22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2210      	movs	r2, #16
 8001c56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c58:	e049      	b.n	8001cee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d045      	beq.n	8001cee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c62:	f7ff f8b9 	bl	8000dd8 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d302      	bcc.n	8001c78 <I2C_IsErrorOccurred+0x54>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d13a      	bne.n	8001cee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c9a:	d121      	bne.n	8001ce0 <I2C_IsErrorOccurred+0xbc>
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ca2:	d01d      	beq.n	8001ce0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ca4:	7cfb      	ldrb	r3, [r7, #19]
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d01a      	beq.n	8001ce0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001cba:	f7ff f88d 	bl	8000dd8 <HAL_GetTick>
 8001cbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cc0:	e00e      	b.n	8001ce0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cc2:	f7ff f889 	bl	8000dd8 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b19      	cmp	r3, #25
 8001cce:	d907      	bls.n	8001ce0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	f043 0320 	orr.w	r3, r3, #32
 8001cd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001cde:	e006      	b.n	8001cee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d1e9      	bne.n	8001cc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	d003      	beq.n	8001d04 <I2C_IsErrorOccurred+0xe0>
 8001cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0aa      	beq.n	8001c5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d103      	bne.n	8001d14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2220      	movs	r2, #32
 8001d12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00b      	beq.n	8001d4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	f043 0308 	orr.w	r3, r3, #8
 8001d5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00b      	beq.n	8001d90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	f043 0302 	orr.w	r3, r3, #2
 8001d7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01c      	beq.n	8001dd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f7ff fe3b 	bl	8001a14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <I2C_IsErrorOccurred+0x1bc>)
 8001daa:	400b      	ands	r3, r1
 8001dac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	fe00e800 	.word	0xfe00e800

08001de4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	817b      	strh	r3, [r7, #10]
 8001df2:	4613      	mov	r3, r2
 8001df4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001df6:	897b      	ldrh	r3, [r7, #10]
 8001df8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dfc:	7a7b      	ldrb	r3, [r7, #9]
 8001dfe:	041b      	lsls	r3, r3, #16
 8001e00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	0d5b      	lsrs	r3, r3, #21
 8001e1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <I2C_TransferConfig+0x60>)
 8001e24:	430b      	orrs	r3, r1
 8001e26:	43db      	mvns	r3, r3
 8001e28:	ea02 0103 	and.w	r1, r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e36:	bf00      	nop
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	03ff63ff 	.word	0x03ff63ff

08001e48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d138      	bne.n	8001ed0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e032      	b.n	8001ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2224      	movs	r2, #36	; 0x24
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6819      	ldr	r1, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e000      	b.n	8001ed2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ed0:	2302      	movs	r3, #2
  }
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d139      	bne.n	8001f68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e033      	b.n	8001f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2224      	movs	r2, #36	; 0x24
 8001f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e000      	b.n	8001f6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
  }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d141      	bne.n	800200a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f86:	4b4b      	ldr	r3, [pc, #300]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f92:	d131      	bne.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f94:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f9a:	4a46      	ldr	r2, [pc, #280]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa4:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fac:	4a41      	ldr	r2, [pc, #260]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fb4:	4b40      	ldr	r3, [pc, #256]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2232      	movs	r2, #50	; 0x32
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	4a3f      	ldr	r2, [pc, #252]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9b      	lsrs	r3, r3, #18
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fca:	e002      	b.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd2:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fde:	d102      	bne.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f2      	bne.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe6:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff2:	d158      	bne.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e057      	b.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff8:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ffe:	4a2d      	ldr	r2, [pc, #180]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002004:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002008:	e04d      	b.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002010:	d141      	bne.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002012:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800201a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201e:	d131      	bne.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002026:	4a23      	ldr	r2, [pc, #140]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002038:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002040:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2232      	movs	r2, #50	; 0x32
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	0c9b      	lsrs	r3, r3, #18
 8002052:	3301      	adds	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002056:	e002      	b.n	800205e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3b01      	subs	r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206a:	d102      	bne.n	8002072 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f2      	bne.n	8002058 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800207e:	d112      	bne.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e011      	b.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002090:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002094:	e007      	b.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	40007000 	.word	0x40007000
 80020b8:	20000000 	.word	0x20000000
 80020bc:	431bde83 	.word	0x431bde83

080020c0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a04      	ldr	r2, [pc, #16]	; (80020dc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ce:	6093      	str	r3, [r2, #8]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40007000 	.word	0x40007000

080020e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e2fe      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d075      	beq.n	80021ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fe:	4b97      	ldr	r3, [pc, #604]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002108:	4b94      	ldr	r3, [pc, #592]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b0c      	cmp	r3, #12
 8002116:	d102      	bne.n	800211e <HAL_RCC_OscConfig+0x3e>
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d002      	beq.n	8002124 <HAL_RCC_OscConfig+0x44>
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2b08      	cmp	r3, #8
 8002122:	d10b      	bne.n	800213c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	4b8d      	ldr	r3, [pc, #564]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d05b      	beq.n	80021e8 <HAL_RCC_OscConfig+0x108>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d157      	bne.n	80021e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e2d9      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d106      	bne.n	8002154 <HAL_RCC_OscConfig+0x74>
 8002146:	4b85      	ldr	r3, [pc, #532]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a84      	ldr	r2, [pc, #528]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e01d      	b.n	8002190 <HAL_RCC_OscConfig+0xb0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x98>
 800215e:	4b7f      	ldr	r3, [pc, #508]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7e      	ldr	r2, [pc, #504]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b7c      	ldr	r3, [pc, #496]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7b      	ldr	r2, [pc, #492]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e00b      	b.n	8002190 <HAL_RCC_OscConfig+0xb0>
 8002178:	4b78      	ldr	r3, [pc, #480]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a77      	ldr	r2, [pc, #476]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 800217e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b75      	ldr	r3, [pc, #468]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a74      	ldr	r2, [pc, #464]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe fe1e 	bl	8000dd8 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7fe fe1a 	bl	8000dd8 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e29e      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b2:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0xc0>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fe0a 	bl	8000dd8 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7fe fe06 	bl	8000dd8 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e28a      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021da:	4b60      	ldr	r3, [pc, #384]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0xe8>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d075      	beq.n	80022e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f6:	4b59      	ldr	r3, [pc, #356]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002200:	4b56      	ldr	r3, [pc, #344]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	d102      	bne.n	8002216 <HAL_RCC_OscConfig+0x136>
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d002      	beq.n	800221c <HAL_RCC_OscConfig+0x13c>
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2b04      	cmp	r3, #4
 800221a:	d11f      	bne.n	800225c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221c:	4b4f      	ldr	r3, [pc, #316]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_OscConfig+0x154>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e25d      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002234:	4b49      	ldr	r3, [pc, #292]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	4946      	ldr	r1, [pc, #280]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002248:	4b45      	ldr	r3, [pc, #276]	; (8002360 <HAL_RCC_OscConfig+0x280>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fd77 	bl	8000d40 <HAL_InitTick>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d043      	beq.n	80022e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e249      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d023      	beq.n	80022ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b3d      	ldr	r3, [pc, #244]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a3c      	ldr	r2, [pc, #240]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe fdb2 	bl	8000dd8 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002278:	f7fe fdae 	bl	8000dd8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e232      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800228a:	4b34      	ldr	r3, [pc, #208]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002296:	4b31      	ldr	r3, [pc, #196]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	061b      	lsls	r3, r3, #24
 80022a4:	492d      	ldr	r1, [pc, #180]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
 80022aa:	e01a      	b.n	80022e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a2a      	ldr	r2, [pc, #168]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 80022b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fd8e 	bl	8000dd8 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe fd8a 	bl	8000dd8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e20e      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1e0>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d041      	beq.n	8002372 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d01c      	beq.n	8002330 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 80022f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fc:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7fe fd67 	bl	8000dd8 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230e:	f7fe fd63 	bl	8000dd8 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e1e7      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002320:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0ef      	beq.n	800230e <HAL_RCC_OscConfig+0x22e>
 800232e:	e020      	b.n	8002372 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002336:	4a09      	ldr	r2, [pc, #36]	; (800235c <HAL_RCC_OscConfig+0x27c>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7fe fd4a 	bl	8000dd8 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002346:	e00d      	b.n	8002364 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002348:	f7fe fd46 	bl	8000dd8 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d906      	bls.n	8002364 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1ca      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002364:	4b8c      	ldr	r3, [pc, #560]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 8002366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1ea      	bne.n	8002348 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80a6 	beq.w	80024cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002384:	4b84      	ldr	r3, [pc, #528]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_OscConfig+0x2b4>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x2b6>
 8002394:	2300      	movs	r3, #0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00d      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b7f      	ldr	r3, [pc, #508]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	4a7e      	ldr	r2, [pc, #504]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6593      	str	r3, [r2, #88]	; 0x58
 80023a6:	4b7c      	ldr	r3, [pc, #496]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b6:	4b79      	ldr	r3, [pc, #484]	; (800259c <HAL_RCC_OscConfig+0x4bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d118      	bne.n	80023f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c2:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_RCC_OscConfig+0x4bc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a75      	ldr	r2, [pc, #468]	; (800259c <HAL_RCC_OscConfig+0x4bc>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7fe fd03 	bl	8000dd8 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d6:	f7fe fcff 	bl	8000dd8 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e183      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e8:	4b6c      	ldr	r3, [pc, #432]	; (800259c <HAL_RCC_OscConfig+0x4bc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d108      	bne.n	800240e <HAL_RCC_OscConfig+0x32e>
 80023fc:	4b66      	ldr	r3, [pc, #408]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	4a65      	ldr	r2, [pc, #404]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240c:	e024      	b.n	8002458 <HAL_RCC_OscConfig+0x378>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b05      	cmp	r3, #5
 8002414:	d110      	bne.n	8002438 <HAL_RCC_OscConfig+0x358>
 8002416:	4b60      	ldr	r3, [pc, #384]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	4a5e      	ldr	r2, [pc, #376]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002426:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	4a5a      	ldr	r2, [pc, #360]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002436:	e00f      	b.n	8002458 <HAL_RCC_OscConfig+0x378>
 8002438:	4b57      	ldr	r3, [pc, #348]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	4a56      	ldr	r2, [pc, #344]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 8002450:	f023 0304 	bic.w	r3, r3, #4
 8002454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d016      	beq.n	800248e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7fe fcba 	bl	8000dd8 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fcb6 	bl	8000dd8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e138      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247e:	4b46      	ldr	r3, [pc, #280]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ed      	beq.n	8002468 <HAL_RCC_OscConfig+0x388>
 800248c:	e015      	b.n	80024ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248e:	f7fe fca3 	bl	8000dd8 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe fc9f 	bl	8000dd8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e121      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1ed      	bne.n	8002496 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ba:	7ffb      	ldrb	r3, [r7, #31]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c0:	4b35      	ldr	r3, [pc, #212]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	4a34      	ldr	r2, [pc, #208]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 80024c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d03c      	beq.n	8002552 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01c      	beq.n	800251a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024e0:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 80024e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e6:	4a2c      	ldr	r2, [pc, #176]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7fe fc72 	bl	8000dd8 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024f8:	f7fe fc6e 	bl	8000dd8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e0f2      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800250a:	4b23      	ldr	r3, [pc, #140]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 800250c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ef      	beq.n	80024f8 <HAL_RCC_OscConfig+0x418>
 8002518:	e01b      	b.n	8002552 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 800251c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002520:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252a:	f7fe fc55 	bl	8000dd8 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002532:	f7fe fc51 	bl	8000dd8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0d5      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 8002546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ef      	bne.n	8002532 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80c9 	beq.w	80026ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800255c:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b0c      	cmp	r3, #12
 8002566:	f000 8083 	beq.w	8002670 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d15e      	bne.n	8002630 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_RCC_OscConfig+0x4b8>)
 8002578:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800257c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7fe fc2b 	bl	8000dd8 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002584:	e00c      	b.n	80025a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fc27 	bl	8000dd8 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d905      	bls.n	80025a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0ab      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
 8002598:	40021000 	.word	0x40021000
 800259c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a0:	4b55      	ldr	r3, [pc, #340]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ec      	bne.n	8002586 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ac:	4b52      	ldr	r3, [pc, #328]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	4b52      	ldr	r3, [pc, #328]	; (80026fc <HAL_RCC_OscConfig+0x61c>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6a11      	ldr	r1, [r2, #32]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025bc:	3a01      	subs	r2, #1
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	4311      	orrs	r1, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80025c6:	0212      	lsls	r2, r2, #8
 80025c8:	4311      	orrs	r1, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025ce:	0852      	lsrs	r2, r2, #1
 80025d0:	3a01      	subs	r2, #1
 80025d2:	0552      	lsls	r2, r2, #21
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025da:	0852      	lsrs	r2, r2, #1
 80025dc:	3a01      	subs	r2, #1
 80025de:	0652      	lsls	r2, r2, #25
 80025e0:	4311      	orrs	r1, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025e6:	06d2      	lsls	r2, r2, #27
 80025e8:	430a      	orrs	r2, r1
 80025ea:	4943      	ldr	r1, [pc, #268]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f0:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a40      	ldr	r2, [pc, #256]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 80025f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025fc:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4a3d      	ldr	r2, [pc, #244]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 8002602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002606:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe fbe6 	bl	8000dd8 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002610:	f7fe fbe2 	bl	8000dd8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e066      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002622:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x530>
 800262e:	e05e      	b.n	80026ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002630:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a30      	ldr	r2, [pc, #192]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 8002636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800263a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fbcc 	bl	8000dd8 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fbc8 	bl	8000dd8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e04c      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002662:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	4924      	ldr	r1, [pc, #144]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 8002668:	4b25      	ldr	r3, [pc, #148]	; (8002700 <HAL_RCC_OscConfig+0x620>)
 800266a:	4013      	ands	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
 800266e:	e03e      	b.n	80026ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e039      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800267c:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_RCC_OscConfig+0x618>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 0203 	and.w	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	429a      	cmp	r2, r3
 800268e:	d12c      	bne.n	80026ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	3b01      	subs	r3, #1
 800269c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d123      	bne.n	80026ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d11b      	bne.n	80026ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d113      	bne.n	80026ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	085b      	lsrs	r3, r3, #1
 80026ce:	3b01      	subs	r3, #1
 80026d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d109      	bne.n	80026ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3720      	adds	r7, #32
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	019f800c 	.word	0x019f800c
 8002700:	feeefffc 	.word	0xfeeefffc

08002704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e11e      	b.n	800295a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b91      	ldr	r3, [pc, #580]	; (8002964 <HAL_RCC_ClockConfig+0x260>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b8e      	ldr	r3, [pc, #568]	; (8002964 <HAL_RCC_ClockConfig+0x260>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 020f 	bic.w	r2, r3, #15
 8002732:	498c      	ldr	r1, [pc, #560]	; (8002964 <HAL_RCC_ClockConfig+0x260>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b8a      	ldr	r3, [pc, #552]	; (8002964 <HAL_RCC_ClockConfig+0x260>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e106      	b.n	800295a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d073      	beq.n	8002840 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d129      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002760:	4b81      	ldr	r3, [pc, #516]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0f4      	b.n	800295a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002770:	f000 f966 	bl	8002a40 <RCC_GetSysClockFreqFromPLLSource>
 8002774:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4a7c      	ldr	r2, [pc, #496]	; (800296c <HAL_RCC_ClockConfig+0x268>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d93f      	bls.n	80027fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800277e:	4b7a      	ldr	r3, [pc, #488]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002792:	2b00      	cmp	r3, #0
 8002794:	d033      	beq.n	80027fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800279a:	2b00      	cmp	r3, #0
 800279c:	d12f      	bne.n	80027fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800279e:	4b72      	ldr	r3, [pc, #456]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a6:	4a70      	ldr	r2, [pc, #448]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 80027a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	e024      	b.n	80027fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d107      	bne.n	80027cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027bc:	4b6a      	ldr	r3, [pc, #424]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d109      	bne.n	80027dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0c6      	b.n	800295a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027cc:	4b66      	ldr	r3, [pc, #408]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0be      	b.n	800295a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027dc:	f000 f8ce 	bl	800297c <HAL_RCC_GetSysClockFreq>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4a61      	ldr	r2, [pc, #388]	; (800296c <HAL_RCC_ClockConfig+0x268>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d909      	bls.n	80027fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027ea:	4b5f      	ldr	r3, [pc, #380]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027f2:	4a5d      	ldr	r2, [pc, #372]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 80027f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b5a      	ldr	r3, [pc, #360]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4957      	ldr	r1, [pc, #348]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002810:	f7fe fae2 	bl	8000dd8 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fe fade 	bl	8000dd8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e095      	b.n	800295a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b4e      	ldr	r3, [pc, #312]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d023      	beq.n	8002894 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002858:	4b43      	ldr	r3, [pc, #268]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a42      	ldr	r2, [pc, #264]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 800285e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002862:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002870:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002878:	4a3b      	ldr	r2, [pc, #236]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 800287a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800287e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002880:	4b39      	ldr	r3, [pc, #228]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4936      	ldr	r1, [pc, #216]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
 8002892:	e008      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b80      	cmp	r3, #128	; 0x80
 8002898:	d105      	bne.n	80028a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800289a:	4b33      	ldr	r3, [pc, #204]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	4a32      	ldr	r2, [pc, #200]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 80028a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a6:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <HAL_RCC_ClockConfig+0x260>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d21d      	bcs.n	80028f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b4:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <HAL_RCC_ClockConfig+0x260>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 020f 	bic.w	r2, r3, #15
 80028bc:	4929      	ldr	r1, [pc, #164]	; (8002964 <HAL_RCC_ClockConfig+0x260>)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fa88 	bl	8000dd8 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7fe fa84 	bl	8000dd8 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e03b      	b.n	800295a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_RCC_ClockConfig+0x260>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1ed      	bne.n	80028cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4917      	ldr	r1, [pc, #92]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	490f      	ldr	r1, [pc, #60]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800292e:	f000 f825 	bl	800297c <HAL_RCC_GetSysClockFreq>
 8002932:	4602      	mov	r2, r0
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <HAL_RCC_ClockConfig+0x264>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	490c      	ldr	r1, [pc, #48]	; (8002970 <HAL_RCC_ClockConfig+0x26c>)
 8002940:	5ccb      	ldrb	r3, [r1, r3]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x270>)
 800294c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_RCC_ClockConfig+0x274>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe f9f4 	bl	8000d40 <HAL_InitTick>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40022000 	.word	0x40022000
 8002968:	40021000 	.word	0x40021000
 800296c:	04c4b400 	.word	0x04c4b400
 8002970:	08003f48 	.word	0x08003f48
 8002974:	20000000 	.word	0x20000000
 8002978:	20000004 	.word	0x20000004

0800297c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002982:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b04      	cmp	r3, #4
 800298c:	d102      	bne.n	8002994 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800298e:	4b2a      	ldr	r3, [pc, #168]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	e047      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002994:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d102      	bne.n	80029a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029a0:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	e03e      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80029a6:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d136      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	3301      	adds	r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d10c      	bne.n	80029ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029d0:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029da:	68d2      	ldr	r2, [r2, #12]
 80029dc:	0a12      	lsrs	r2, r2, #8
 80029de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	617b      	str	r3, [r7, #20]
      break;
 80029e8:	e00c      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ea:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f2:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f4:	68d2      	ldr	r2, [r2, #12]
 80029f6:	0a12      	lsrs	r2, r2, #8
 80029f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029fc:	fb02 f303 	mul.w	r3, r2, r3
 8002a00:	617b      	str	r3, [r7, #20]
      break;
 8002a02:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	0e5b      	lsrs	r3, r3, #25
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	3301      	adds	r3, #1
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	e001      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a24:	693b      	ldr	r3, [r7, #16]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	00f42400 	.word	0x00f42400
 8002a3c:	007a1200 	.word	0x007a1200

08002a40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d10c      	bne.n	8002a7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a64:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a6e:	68d2      	ldr	r2, [r2, #12]
 8002a70:	0a12      	lsrs	r2, r2, #8
 8002a72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	617b      	str	r3, [r7, #20]
    break;
 8002a7c:	e00c      	b.n	8002a98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a7e:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a88:	68d2      	ldr	r2, [r2, #12]
 8002a8a:	0a12      	lsrs	r2, r2, #8
 8002a8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a90:	fb02 f303 	mul.w	r3, r2, r3
 8002a94:	617b      	str	r3, [r7, #20]
    break;
 8002a96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0e5b      	lsrs	r3, r3, #25
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002ab2:	687b      	ldr	r3, [r7, #4]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	007a1200 	.word	0x007a1200
 8002ac8:	00f42400 	.word	0x00f42400

08002acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ad8:	2300      	movs	r3, #0
 8002ada:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8098 	beq.w	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aee:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10d      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	4b40      	ldr	r3, [pc, #256]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	4a3f      	ldr	r2, [pc, #252]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6593      	str	r3, [r2, #88]	; 0x58
 8002b06:	4b3d      	ldr	r3, [pc, #244]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b12:	2301      	movs	r3, #1
 8002b14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b16:	4b3a      	ldr	r3, [pc, #232]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a39      	ldr	r2, [pc, #228]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b22:	f7fe f959 	bl	8000dd8 <HAL_GetTick>
 8002b26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b28:	e009      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7fe f955 	bl	8000dd8 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d902      	bls.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	74fb      	strb	r3, [r7, #19]
        break;
 8002b3c:	e005      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b3e:	4b30      	ldr	r3, [pc, #192]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0ef      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d159      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b50:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01e      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d019      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b6c:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b78:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	4a1f      	ldr	r2, [pc, #124]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b98:	4a18      	ldr	r2, [pc, #96]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d016      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7fe f915 	bl	8000dd8 <HAL_GetTick>
 8002bae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb0:	e00b      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe f911 	bl	8000dd8 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d902      	bls.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	74fb      	strb	r3, [r7, #19]
            break;
 8002bc8:	e006      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ec      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bec:	4903      	ldr	r1, [pc, #12]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bf4:	e008      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bf6:	7cfb      	ldrb	r3, [r7, #19]
 8002bf8:	74bb      	strb	r3, [r7, #18]
 8002bfa:	e005      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c08:	7c7b      	ldrb	r3, [r7, #17]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4ba7      	ldr	r3, [pc, #668]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	4aa6      	ldr	r2, [pc, #664]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c26:	4ba1      	ldr	r3, [pc, #644]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f023 0203 	bic.w	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	499d      	ldr	r1, [pc, #628]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c48:	4b98      	ldr	r3, [pc, #608]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	f023 020c 	bic.w	r2, r3, #12
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4995      	ldr	r1, [pc, #596]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c6a:	4b90      	ldr	r3, [pc, #576]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	498c      	ldr	r1, [pc, #560]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c8c:	4b87      	ldr	r3, [pc, #540]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	4984      	ldr	r1, [pc, #528]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cae:	4b7f      	ldr	r3, [pc, #508]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	497b      	ldr	r1, [pc, #492]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cd0:	4b76      	ldr	r3, [pc, #472]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	4973      	ldr	r1, [pc, #460]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf2:	4b6e      	ldr	r3, [pc, #440]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	496a      	ldr	r1, [pc, #424]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d14:	4b65      	ldr	r3, [pc, #404]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4962      	ldr	r1, [pc, #392]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d36:	4b5d      	ldr	r3, [pc, #372]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	4959      	ldr	r1, [pc, #356]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d58:	4b54      	ldr	r3, [pc, #336]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	4951      	ldr	r1, [pc, #324]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d7a:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	4948      	ldr	r1, [pc, #288]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d015      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d9c:	4b43      	ldr	r3, [pc, #268]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4940      	ldr	r1, [pc, #256]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a3a      	ldr	r2, [pc, #232]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d015      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dd4:	4b35      	ldr	r3, [pc, #212]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	4932      	ldr	r1, [pc, #200]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df2:	d105      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df4:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a2c      	ldr	r2, [pc, #176]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dfe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d015      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e0c:	4b27      	ldr	r3, [pc, #156]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	4924      	ldr	r1, [pc, #144]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e2a:	d105      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e2c:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d015      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	4916      	ldr	r1, [pc, #88]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e62:	d105      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a10      	ldr	r2, [pc, #64]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d019      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4908      	ldr	r1, [pc, #32]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e9a:	d109      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a02      	ldr	r2, [pc, #8]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea6:	60d3      	str	r3, [r2, #12]
 8002ea8:	e002      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d015      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ebc:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	4926      	ldr	r1, [pc, #152]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002edc:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d015      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f02:	4918      	ldr	r1, [pc, #96]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f12:	d105      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d015      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	490a      	ldr	r1, [pc, #40]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f58:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000

08002f68 <__errno>:
 8002f68:	4b01      	ldr	r3, [pc, #4]	; (8002f70 <__errno+0x8>)
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	2000000c 	.word	0x2000000c

08002f74 <__libc_init_array>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	4d0d      	ldr	r5, [pc, #52]	; (8002fac <__libc_init_array+0x38>)
 8002f78:	4c0d      	ldr	r4, [pc, #52]	; (8002fb0 <__libc_init_array+0x3c>)
 8002f7a:	1b64      	subs	r4, r4, r5
 8002f7c:	10a4      	asrs	r4, r4, #2
 8002f7e:	2600      	movs	r6, #0
 8002f80:	42a6      	cmp	r6, r4
 8002f82:	d109      	bne.n	8002f98 <__libc_init_array+0x24>
 8002f84:	4d0b      	ldr	r5, [pc, #44]	; (8002fb4 <__libc_init_array+0x40>)
 8002f86:	4c0c      	ldr	r4, [pc, #48]	; (8002fb8 <__libc_init_array+0x44>)
 8002f88:	f000 ffae 	bl	8003ee8 <_init>
 8002f8c:	1b64      	subs	r4, r4, r5
 8002f8e:	10a4      	asrs	r4, r4, #2
 8002f90:	2600      	movs	r6, #0
 8002f92:	42a6      	cmp	r6, r4
 8002f94:	d105      	bne.n	8002fa2 <__libc_init_array+0x2e>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9c:	4798      	blx	r3
 8002f9e:	3601      	adds	r6, #1
 8002fa0:	e7ee      	b.n	8002f80 <__libc_init_array+0xc>
 8002fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa6:	4798      	blx	r3
 8002fa8:	3601      	adds	r6, #1
 8002faa:	e7f2      	b.n	8002f92 <__libc_init_array+0x1e>
 8002fac:	08003ff0 	.word	0x08003ff0
 8002fb0:	08003ff0 	.word	0x08003ff0
 8002fb4:	08003ff0 	.word	0x08003ff0
 8002fb8:	08003ff4 	.word	0x08003ff4

08002fbc <memset>:
 8002fbc:	4402      	add	r2, r0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d100      	bne.n	8002fc6 <memset+0xa>
 8002fc4:	4770      	bx	lr
 8002fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fca:	e7f9      	b.n	8002fc0 <memset+0x4>

08002fcc <iprintf>:
 8002fcc:	b40f      	push	{r0, r1, r2, r3}
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <iprintf+0x2c>)
 8002fd0:	b513      	push	{r0, r1, r4, lr}
 8002fd2:	681c      	ldr	r4, [r3, #0]
 8002fd4:	b124      	cbz	r4, 8002fe0 <iprintf+0x14>
 8002fd6:	69a3      	ldr	r3, [r4, #24]
 8002fd8:	b913      	cbnz	r3, 8002fe0 <iprintf+0x14>
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f000 f866 	bl	80030ac <__sinit>
 8002fe0:	ab05      	add	r3, sp, #20
 8002fe2:	9a04      	ldr	r2, [sp, #16]
 8002fe4:	68a1      	ldr	r1, [r4, #8]
 8002fe6:	9301      	str	r3, [sp, #4]
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f000 f9bd 	bl	8003368 <_vfiprintf_r>
 8002fee:	b002      	add	sp, #8
 8002ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff4:	b004      	add	sp, #16
 8002ff6:	4770      	bx	lr
 8002ff8:	2000000c 	.word	0x2000000c

08002ffc <std>:
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	b510      	push	{r4, lr}
 8003000:	4604      	mov	r4, r0
 8003002:	e9c0 3300 	strd	r3, r3, [r0]
 8003006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800300a:	6083      	str	r3, [r0, #8]
 800300c:	8181      	strh	r1, [r0, #12]
 800300e:	6643      	str	r3, [r0, #100]	; 0x64
 8003010:	81c2      	strh	r2, [r0, #14]
 8003012:	6183      	str	r3, [r0, #24]
 8003014:	4619      	mov	r1, r3
 8003016:	2208      	movs	r2, #8
 8003018:	305c      	adds	r0, #92	; 0x5c
 800301a:	f7ff ffcf 	bl	8002fbc <memset>
 800301e:	4b05      	ldr	r3, [pc, #20]	; (8003034 <std+0x38>)
 8003020:	6263      	str	r3, [r4, #36]	; 0x24
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <std+0x3c>)
 8003024:	62a3      	str	r3, [r4, #40]	; 0x28
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <std+0x40>)
 8003028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <std+0x44>)
 800302c:	6224      	str	r4, [r4, #32]
 800302e:	6323      	str	r3, [r4, #48]	; 0x30
 8003030:	bd10      	pop	{r4, pc}
 8003032:	bf00      	nop
 8003034:	08003911 	.word	0x08003911
 8003038:	08003933 	.word	0x08003933
 800303c:	0800396b 	.word	0x0800396b
 8003040:	0800398f 	.word	0x0800398f

08003044 <_cleanup_r>:
 8003044:	4901      	ldr	r1, [pc, #4]	; (800304c <_cleanup_r+0x8>)
 8003046:	f000 b8af 	b.w	80031a8 <_fwalk_reent>
 800304a:	bf00      	nop
 800304c:	08003c69 	.word	0x08003c69

08003050 <__sfmoreglue>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	2268      	movs	r2, #104	; 0x68
 8003054:	1e4d      	subs	r5, r1, #1
 8003056:	4355      	muls	r5, r2
 8003058:	460e      	mov	r6, r1
 800305a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800305e:	f000 f8e5 	bl	800322c <_malloc_r>
 8003062:	4604      	mov	r4, r0
 8003064:	b140      	cbz	r0, 8003078 <__sfmoreglue+0x28>
 8003066:	2100      	movs	r1, #0
 8003068:	e9c0 1600 	strd	r1, r6, [r0]
 800306c:	300c      	adds	r0, #12
 800306e:	60a0      	str	r0, [r4, #8]
 8003070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003074:	f7ff ffa2 	bl	8002fbc <memset>
 8003078:	4620      	mov	r0, r4
 800307a:	bd70      	pop	{r4, r5, r6, pc}

0800307c <__sfp_lock_acquire>:
 800307c:	4801      	ldr	r0, [pc, #4]	; (8003084 <__sfp_lock_acquire+0x8>)
 800307e:	f000 b8b3 	b.w	80031e8 <__retarget_lock_acquire_recursive>
 8003082:	bf00      	nop
 8003084:	200000e9 	.word	0x200000e9

08003088 <__sfp_lock_release>:
 8003088:	4801      	ldr	r0, [pc, #4]	; (8003090 <__sfp_lock_release+0x8>)
 800308a:	f000 b8ae 	b.w	80031ea <__retarget_lock_release_recursive>
 800308e:	bf00      	nop
 8003090:	200000e9 	.word	0x200000e9

08003094 <__sinit_lock_acquire>:
 8003094:	4801      	ldr	r0, [pc, #4]	; (800309c <__sinit_lock_acquire+0x8>)
 8003096:	f000 b8a7 	b.w	80031e8 <__retarget_lock_acquire_recursive>
 800309a:	bf00      	nop
 800309c:	200000ea 	.word	0x200000ea

080030a0 <__sinit_lock_release>:
 80030a0:	4801      	ldr	r0, [pc, #4]	; (80030a8 <__sinit_lock_release+0x8>)
 80030a2:	f000 b8a2 	b.w	80031ea <__retarget_lock_release_recursive>
 80030a6:	bf00      	nop
 80030a8:	200000ea 	.word	0x200000ea

080030ac <__sinit>:
 80030ac:	b510      	push	{r4, lr}
 80030ae:	4604      	mov	r4, r0
 80030b0:	f7ff fff0 	bl	8003094 <__sinit_lock_acquire>
 80030b4:	69a3      	ldr	r3, [r4, #24]
 80030b6:	b11b      	cbz	r3, 80030c0 <__sinit+0x14>
 80030b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030bc:	f7ff bff0 	b.w	80030a0 <__sinit_lock_release>
 80030c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80030c4:	6523      	str	r3, [r4, #80]	; 0x50
 80030c6:	4b13      	ldr	r3, [pc, #76]	; (8003114 <__sinit+0x68>)
 80030c8:	4a13      	ldr	r2, [pc, #76]	; (8003118 <__sinit+0x6c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80030ce:	42a3      	cmp	r3, r4
 80030d0:	bf04      	itt	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	61a3      	streq	r3, [r4, #24]
 80030d6:	4620      	mov	r0, r4
 80030d8:	f000 f820 	bl	800311c <__sfp>
 80030dc:	6060      	str	r0, [r4, #4]
 80030de:	4620      	mov	r0, r4
 80030e0:	f000 f81c 	bl	800311c <__sfp>
 80030e4:	60a0      	str	r0, [r4, #8]
 80030e6:	4620      	mov	r0, r4
 80030e8:	f000 f818 	bl	800311c <__sfp>
 80030ec:	2200      	movs	r2, #0
 80030ee:	60e0      	str	r0, [r4, #12]
 80030f0:	2104      	movs	r1, #4
 80030f2:	6860      	ldr	r0, [r4, #4]
 80030f4:	f7ff ff82 	bl	8002ffc <std>
 80030f8:	68a0      	ldr	r0, [r4, #8]
 80030fa:	2201      	movs	r2, #1
 80030fc:	2109      	movs	r1, #9
 80030fe:	f7ff ff7d 	bl	8002ffc <std>
 8003102:	68e0      	ldr	r0, [r4, #12]
 8003104:	2202      	movs	r2, #2
 8003106:	2112      	movs	r1, #18
 8003108:	f7ff ff78 	bl	8002ffc <std>
 800310c:	2301      	movs	r3, #1
 800310e:	61a3      	str	r3, [r4, #24]
 8003110:	e7d2      	b.n	80030b8 <__sinit+0xc>
 8003112:	bf00      	nop
 8003114:	08003f58 	.word	0x08003f58
 8003118:	08003045 	.word	0x08003045

0800311c <__sfp>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	4607      	mov	r7, r0
 8003120:	f7ff ffac 	bl	800307c <__sfp_lock_acquire>
 8003124:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <__sfp+0x84>)
 8003126:	681e      	ldr	r6, [r3, #0]
 8003128:	69b3      	ldr	r3, [r6, #24]
 800312a:	b913      	cbnz	r3, 8003132 <__sfp+0x16>
 800312c:	4630      	mov	r0, r6
 800312e:	f7ff ffbd 	bl	80030ac <__sinit>
 8003132:	3648      	adds	r6, #72	; 0x48
 8003134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003138:	3b01      	subs	r3, #1
 800313a:	d503      	bpl.n	8003144 <__sfp+0x28>
 800313c:	6833      	ldr	r3, [r6, #0]
 800313e:	b30b      	cbz	r3, 8003184 <__sfp+0x68>
 8003140:	6836      	ldr	r6, [r6, #0]
 8003142:	e7f7      	b.n	8003134 <__sfp+0x18>
 8003144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003148:	b9d5      	cbnz	r5, 8003180 <__sfp+0x64>
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <__sfp+0x88>)
 800314c:	60e3      	str	r3, [r4, #12]
 800314e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003152:	6665      	str	r5, [r4, #100]	; 0x64
 8003154:	f000 f847 	bl	80031e6 <__retarget_lock_init_recursive>
 8003158:	f7ff ff96 	bl	8003088 <__sfp_lock_release>
 800315c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003160:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003164:	6025      	str	r5, [r4, #0]
 8003166:	61a5      	str	r5, [r4, #24]
 8003168:	2208      	movs	r2, #8
 800316a:	4629      	mov	r1, r5
 800316c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003170:	f7ff ff24 	bl	8002fbc <memset>
 8003174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800317c:	4620      	mov	r0, r4
 800317e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003180:	3468      	adds	r4, #104	; 0x68
 8003182:	e7d9      	b.n	8003138 <__sfp+0x1c>
 8003184:	2104      	movs	r1, #4
 8003186:	4638      	mov	r0, r7
 8003188:	f7ff ff62 	bl	8003050 <__sfmoreglue>
 800318c:	4604      	mov	r4, r0
 800318e:	6030      	str	r0, [r6, #0]
 8003190:	2800      	cmp	r0, #0
 8003192:	d1d5      	bne.n	8003140 <__sfp+0x24>
 8003194:	f7ff ff78 	bl	8003088 <__sfp_lock_release>
 8003198:	230c      	movs	r3, #12
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	e7ee      	b.n	800317c <__sfp+0x60>
 800319e:	bf00      	nop
 80031a0:	08003f58 	.word	0x08003f58
 80031a4:	ffff0001 	.word	0xffff0001

080031a8 <_fwalk_reent>:
 80031a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031ac:	4606      	mov	r6, r0
 80031ae:	4688      	mov	r8, r1
 80031b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031b4:	2700      	movs	r7, #0
 80031b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031ba:	f1b9 0901 	subs.w	r9, r9, #1
 80031be:	d505      	bpl.n	80031cc <_fwalk_reent+0x24>
 80031c0:	6824      	ldr	r4, [r4, #0]
 80031c2:	2c00      	cmp	r4, #0
 80031c4:	d1f7      	bne.n	80031b6 <_fwalk_reent+0xe>
 80031c6:	4638      	mov	r0, r7
 80031c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031cc:	89ab      	ldrh	r3, [r5, #12]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d907      	bls.n	80031e2 <_fwalk_reent+0x3a>
 80031d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031d6:	3301      	adds	r3, #1
 80031d8:	d003      	beq.n	80031e2 <_fwalk_reent+0x3a>
 80031da:	4629      	mov	r1, r5
 80031dc:	4630      	mov	r0, r6
 80031de:	47c0      	blx	r8
 80031e0:	4307      	orrs	r7, r0
 80031e2:	3568      	adds	r5, #104	; 0x68
 80031e4:	e7e9      	b.n	80031ba <_fwalk_reent+0x12>

080031e6 <__retarget_lock_init_recursive>:
 80031e6:	4770      	bx	lr

080031e8 <__retarget_lock_acquire_recursive>:
 80031e8:	4770      	bx	lr

080031ea <__retarget_lock_release_recursive>:
 80031ea:	4770      	bx	lr

080031ec <sbrk_aligned>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	4e0e      	ldr	r6, [pc, #56]	; (8003228 <sbrk_aligned+0x3c>)
 80031f0:	460c      	mov	r4, r1
 80031f2:	6831      	ldr	r1, [r6, #0]
 80031f4:	4605      	mov	r5, r0
 80031f6:	b911      	cbnz	r1, 80031fe <sbrk_aligned+0x12>
 80031f8:	f000 fb7a 	bl	80038f0 <_sbrk_r>
 80031fc:	6030      	str	r0, [r6, #0]
 80031fe:	4621      	mov	r1, r4
 8003200:	4628      	mov	r0, r5
 8003202:	f000 fb75 	bl	80038f0 <_sbrk_r>
 8003206:	1c43      	adds	r3, r0, #1
 8003208:	d00a      	beq.n	8003220 <sbrk_aligned+0x34>
 800320a:	1cc4      	adds	r4, r0, #3
 800320c:	f024 0403 	bic.w	r4, r4, #3
 8003210:	42a0      	cmp	r0, r4
 8003212:	d007      	beq.n	8003224 <sbrk_aligned+0x38>
 8003214:	1a21      	subs	r1, r4, r0
 8003216:	4628      	mov	r0, r5
 8003218:	f000 fb6a 	bl	80038f0 <_sbrk_r>
 800321c:	3001      	adds	r0, #1
 800321e:	d101      	bne.n	8003224 <sbrk_aligned+0x38>
 8003220:	f04f 34ff 	mov.w	r4, #4294967295
 8003224:	4620      	mov	r0, r4
 8003226:	bd70      	pop	{r4, r5, r6, pc}
 8003228:	200000f0 	.word	0x200000f0

0800322c <_malloc_r>:
 800322c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003230:	1ccd      	adds	r5, r1, #3
 8003232:	f025 0503 	bic.w	r5, r5, #3
 8003236:	3508      	adds	r5, #8
 8003238:	2d0c      	cmp	r5, #12
 800323a:	bf38      	it	cc
 800323c:	250c      	movcc	r5, #12
 800323e:	2d00      	cmp	r5, #0
 8003240:	4607      	mov	r7, r0
 8003242:	db01      	blt.n	8003248 <_malloc_r+0x1c>
 8003244:	42a9      	cmp	r1, r5
 8003246:	d905      	bls.n	8003254 <_malloc_r+0x28>
 8003248:	230c      	movs	r3, #12
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	2600      	movs	r6, #0
 800324e:	4630      	mov	r0, r6
 8003250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003254:	4e2e      	ldr	r6, [pc, #184]	; (8003310 <_malloc_r+0xe4>)
 8003256:	f000 fdbb 	bl	8003dd0 <__malloc_lock>
 800325a:	6833      	ldr	r3, [r6, #0]
 800325c:	461c      	mov	r4, r3
 800325e:	bb34      	cbnz	r4, 80032ae <_malloc_r+0x82>
 8003260:	4629      	mov	r1, r5
 8003262:	4638      	mov	r0, r7
 8003264:	f7ff ffc2 	bl	80031ec <sbrk_aligned>
 8003268:	1c43      	adds	r3, r0, #1
 800326a:	4604      	mov	r4, r0
 800326c:	d14d      	bne.n	800330a <_malloc_r+0xde>
 800326e:	6834      	ldr	r4, [r6, #0]
 8003270:	4626      	mov	r6, r4
 8003272:	2e00      	cmp	r6, #0
 8003274:	d140      	bne.n	80032f8 <_malloc_r+0xcc>
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	4631      	mov	r1, r6
 800327a:	4638      	mov	r0, r7
 800327c:	eb04 0803 	add.w	r8, r4, r3
 8003280:	f000 fb36 	bl	80038f0 <_sbrk_r>
 8003284:	4580      	cmp	r8, r0
 8003286:	d13a      	bne.n	80032fe <_malloc_r+0xd2>
 8003288:	6821      	ldr	r1, [r4, #0]
 800328a:	3503      	adds	r5, #3
 800328c:	1a6d      	subs	r5, r5, r1
 800328e:	f025 0503 	bic.w	r5, r5, #3
 8003292:	3508      	adds	r5, #8
 8003294:	2d0c      	cmp	r5, #12
 8003296:	bf38      	it	cc
 8003298:	250c      	movcc	r5, #12
 800329a:	4629      	mov	r1, r5
 800329c:	4638      	mov	r0, r7
 800329e:	f7ff ffa5 	bl	80031ec <sbrk_aligned>
 80032a2:	3001      	adds	r0, #1
 80032a4:	d02b      	beq.n	80032fe <_malloc_r+0xd2>
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	442b      	add	r3, r5
 80032aa:	6023      	str	r3, [r4, #0]
 80032ac:	e00e      	b.n	80032cc <_malloc_r+0xa0>
 80032ae:	6822      	ldr	r2, [r4, #0]
 80032b0:	1b52      	subs	r2, r2, r5
 80032b2:	d41e      	bmi.n	80032f2 <_malloc_r+0xc6>
 80032b4:	2a0b      	cmp	r2, #11
 80032b6:	d916      	bls.n	80032e6 <_malloc_r+0xba>
 80032b8:	1961      	adds	r1, r4, r5
 80032ba:	42a3      	cmp	r3, r4
 80032bc:	6025      	str	r5, [r4, #0]
 80032be:	bf18      	it	ne
 80032c0:	6059      	strne	r1, [r3, #4]
 80032c2:	6863      	ldr	r3, [r4, #4]
 80032c4:	bf08      	it	eq
 80032c6:	6031      	streq	r1, [r6, #0]
 80032c8:	5162      	str	r2, [r4, r5]
 80032ca:	604b      	str	r3, [r1, #4]
 80032cc:	4638      	mov	r0, r7
 80032ce:	f104 060b 	add.w	r6, r4, #11
 80032d2:	f000 fd83 	bl	8003ddc <__malloc_unlock>
 80032d6:	f026 0607 	bic.w	r6, r6, #7
 80032da:	1d23      	adds	r3, r4, #4
 80032dc:	1af2      	subs	r2, r6, r3
 80032de:	d0b6      	beq.n	800324e <_malloc_r+0x22>
 80032e0:	1b9b      	subs	r3, r3, r6
 80032e2:	50a3      	str	r3, [r4, r2]
 80032e4:	e7b3      	b.n	800324e <_malloc_r+0x22>
 80032e6:	6862      	ldr	r2, [r4, #4]
 80032e8:	42a3      	cmp	r3, r4
 80032ea:	bf0c      	ite	eq
 80032ec:	6032      	streq	r2, [r6, #0]
 80032ee:	605a      	strne	r2, [r3, #4]
 80032f0:	e7ec      	b.n	80032cc <_malloc_r+0xa0>
 80032f2:	4623      	mov	r3, r4
 80032f4:	6864      	ldr	r4, [r4, #4]
 80032f6:	e7b2      	b.n	800325e <_malloc_r+0x32>
 80032f8:	4634      	mov	r4, r6
 80032fa:	6876      	ldr	r6, [r6, #4]
 80032fc:	e7b9      	b.n	8003272 <_malloc_r+0x46>
 80032fe:	230c      	movs	r3, #12
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	4638      	mov	r0, r7
 8003304:	f000 fd6a 	bl	8003ddc <__malloc_unlock>
 8003308:	e7a1      	b.n	800324e <_malloc_r+0x22>
 800330a:	6025      	str	r5, [r4, #0]
 800330c:	e7de      	b.n	80032cc <_malloc_r+0xa0>
 800330e:	bf00      	nop
 8003310:	200000ec 	.word	0x200000ec

08003314 <__sfputc_r>:
 8003314:	6893      	ldr	r3, [r2, #8]
 8003316:	3b01      	subs	r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	b410      	push	{r4}
 800331c:	6093      	str	r3, [r2, #8]
 800331e:	da08      	bge.n	8003332 <__sfputc_r+0x1e>
 8003320:	6994      	ldr	r4, [r2, #24]
 8003322:	42a3      	cmp	r3, r4
 8003324:	db01      	blt.n	800332a <__sfputc_r+0x16>
 8003326:	290a      	cmp	r1, #10
 8003328:	d103      	bne.n	8003332 <__sfputc_r+0x1e>
 800332a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800332e:	f000 bb33 	b.w	8003998 <__swbuf_r>
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	1c58      	adds	r0, r3, #1
 8003336:	6010      	str	r0, [r2, #0]
 8003338:	7019      	strb	r1, [r3, #0]
 800333a:	4608      	mov	r0, r1
 800333c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003340:	4770      	bx	lr

08003342 <__sfputs_r>:
 8003342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003344:	4606      	mov	r6, r0
 8003346:	460f      	mov	r7, r1
 8003348:	4614      	mov	r4, r2
 800334a:	18d5      	adds	r5, r2, r3
 800334c:	42ac      	cmp	r4, r5
 800334e:	d101      	bne.n	8003354 <__sfputs_r+0x12>
 8003350:	2000      	movs	r0, #0
 8003352:	e007      	b.n	8003364 <__sfputs_r+0x22>
 8003354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003358:	463a      	mov	r2, r7
 800335a:	4630      	mov	r0, r6
 800335c:	f7ff ffda 	bl	8003314 <__sfputc_r>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	d1f3      	bne.n	800334c <__sfputs_r+0xa>
 8003364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003368 <_vfiprintf_r>:
 8003368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336c:	460d      	mov	r5, r1
 800336e:	b09d      	sub	sp, #116	; 0x74
 8003370:	4614      	mov	r4, r2
 8003372:	4698      	mov	r8, r3
 8003374:	4606      	mov	r6, r0
 8003376:	b118      	cbz	r0, 8003380 <_vfiprintf_r+0x18>
 8003378:	6983      	ldr	r3, [r0, #24]
 800337a:	b90b      	cbnz	r3, 8003380 <_vfiprintf_r+0x18>
 800337c:	f7ff fe96 	bl	80030ac <__sinit>
 8003380:	4b89      	ldr	r3, [pc, #548]	; (80035a8 <_vfiprintf_r+0x240>)
 8003382:	429d      	cmp	r5, r3
 8003384:	d11b      	bne.n	80033be <_vfiprintf_r+0x56>
 8003386:	6875      	ldr	r5, [r6, #4]
 8003388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800338a:	07d9      	lsls	r1, r3, #31
 800338c:	d405      	bmi.n	800339a <_vfiprintf_r+0x32>
 800338e:	89ab      	ldrh	r3, [r5, #12]
 8003390:	059a      	lsls	r2, r3, #22
 8003392:	d402      	bmi.n	800339a <_vfiprintf_r+0x32>
 8003394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003396:	f7ff ff27 	bl	80031e8 <__retarget_lock_acquire_recursive>
 800339a:	89ab      	ldrh	r3, [r5, #12]
 800339c:	071b      	lsls	r3, r3, #28
 800339e:	d501      	bpl.n	80033a4 <_vfiprintf_r+0x3c>
 80033a0:	692b      	ldr	r3, [r5, #16]
 80033a2:	b9eb      	cbnz	r3, 80033e0 <_vfiprintf_r+0x78>
 80033a4:	4629      	mov	r1, r5
 80033a6:	4630      	mov	r0, r6
 80033a8:	f000 fb5a 	bl	8003a60 <__swsetup_r>
 80033ac:	b1c0      	cbz	r0, 80033e0 <_vfiprintf_r+0x78>
 80033ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033b0:	07dc      	lsls	r4, r3, #31
 80033b2:	d50e      	bpl.n	80033d2 <_vfiprintf_r+0x6a>
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	b01d      	add	sp, #116	; 0x74
 80033ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033be:	4b7b      	ldr	r3, [pc, #492]	; (80035ac <_vfiprintf_r+0x244>)
 80033c0:	429d      	cmp	r5, r3
 80033c2:	d101      	bne.n	80033c8 <_vfiprintf_r+0x60>
 80033c4:	68b5      	ldr	r5, [r6, #8]
 80033c6:	e7df      	b.n	8003388 <_vfiprintf_r+0x20>
 80033c8:	4b79      	ldr	r3, [pc, #484]	; (80035b0 <_vfiprintf_r+0x248>)
 80033ca:	429d      	cmp	r5, r3
 80033cc:	bf08      	it	eq
 80033ce:	68f5      	ldreq	r5, [r6, #12]
 80033d0:	e7da      	b.n	8003388 <_vfiprintf_r+0x20>
 80033d2:	89ab      	ldrh	r3, [r5, #12]
 80033d4:	0598      	lsls	r0, r3, #22
 80033d6:	d4ed      	bmi.n	80033b4 <_vfiprintf_r+0x4c>
 80033d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033da:	f7ff ff06 	bl	80031ea <__retarget_lock_release_recursive>
 80033de:	e7e9      	b.n	80033b4 <_vfiprintf_r+0x4c>
 80033e0:	2300      	movs	r3, #0
 80033e2:	9309      	str	r3, [sp, #36]	; 0x24
 80033e4:	2320      	movs	r3, #32
 80033e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80033ee:	2330      	movs	r3, #48	; 0x30
 80033f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80035b4 <_vfiprintf_r+0x24c>
 80033f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033f8:	f04f 0901 	mov.w	r9, #1
 80033fc:	4623      	mov	r3, r4
 80033fe:	469a      	mov	sl, r3
 8003400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003404:	b10a      	cbz	r2, 800340a <_vfiprintf_r+0xa2>
 8003406:	2a25      	cmp	r2, #37	; 0x25
 8003408:	d1f9      	bne.n	80033fe <_vfiprintf_r+0x96>
 800340a:	ebba 0b04 	subs.w	fp, sl, r4
 800340e:	d00b      	beq.n	8003428 <_vfiprintf_r+0xc0>
 8003410:	465b      	mov	r3, fp
 8003412:	4622      	mov	r2, r4
 8003414:	4629      	mov	r1, r5
 8003416:	4630      	mov	r0, r6
 8003418:	f7ff ff93 	bl	8003342 <__sfputs_r>
 800341c:	3001      	adds	r0, #1
 800341e:	f000 80aa 	beq.w	8003576 <_vfiprintf_r+0x20e>
 8003422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003424:	445a      	add	r2, fp
 8003426:	9209      	str	r2, [sp, #36]	; 0x24
 8003428:	f89a 3000 	ldrb.w	r3, [sl]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80a2 	beq.w	8003576 <_vfiprintf_r+0x20e>
 8003432:	2300      	movs	r3, #0
 8003434:	f04f 32ff 	mov.w	r2, #4294967295
 8003438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800343c:	f10a 0a01 	add.w	sl, sl, #1
 8003440:	9304      	str	r3, [sp, #16]
 8003442:	9307      	str	r3, [sp, #28]
 8003444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003448:	931a      	str	r3, [sp, #104]	; 0x68
 800344a:	4654      	mov	r4, sl
 800344c:	2205      	movs	r2, #5
 800344e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003452:	4858      	ldr	r0, [pc, #352]	; (80035b4 <_vfiprintf_r+0x24c>)
 8003454:	f7fc fee4 	bl	8000220 <memchr>
 8003458:	9a04      	ldr	r2, [sp, #16]
 800345a:	b9d8      	cbnz	r0, 8003494 <_vfiprintf_r+0x12c>
 800345c:	06d1      	lsls	r1, r2, #27
 800345e:	bf44      	itt	mi
 8003460:	2320      	movmi	r3, #32
 8003462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003466:	0713      	lsls	r3, r2, #28
 8003468:	bf44      	itt	mi
 800346a:	232b      	movmi	r3, #43	; 0x2b
 800346c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003470:	f89a 3000 	ldrb.w	r3, [sl]
 8003474:	2b2a      	cmp	r3, #42	; 0x2a
 8003476:	d015      	beq.n	80034a4 <_vfiprintf_r+0x13c>
 8003478:	9a07      	ldr	r2, [sp, #28]
 800347a:	4654      	mov	r4, sl
 800347c:	2000      	movs	r0, #0
 800347e:	f04f 0c0a 	mov.w	ip, #10
 8003482:	4621      	mov	r1, r4
 8003484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003488:	3b30      	subs	r3, #48	; 0x30
 800348a:	2b09      	cmp	r3, #9
 800348c:	d94e      	bls.n	800352c <_vfiprintf_r+0x1c4>
 800348e:	b1b0      	cbz	r0, 80034be <_vfiprintf_r+0x156>
 8003490:	9207      	str	r2, [sp, #28]
 8003492:	e014      	b.n	80034be <_vfiprintf_r+0x156>
 8003494:	eba0 0308 	sub.w	r3, r0, r8
 8003498:	fa09 f303 	lsl.w	r3, r9, r3
 800349c:	4313      	orrs	r3, r2
 800349e:	9304      	str	r3, [sp, #16]
 80034a0:	46a2      	mov	sl, r4
 80034a2:	e7d2      	b.n	800344a <_vfiprintf_r+0xe2>
 80034a4:	9b03      	ldr	r3, [sp, #12]
 80034a6:	1d19      	adds	r1, r3, #4
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	9103      	str	r1, [sp, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bfbb      	ittet	lt
 80034b0:	425b      	neglt	r3, r3
 80034b2:	f042 0202 	orrlt.w	r2, r2, #2
 80034b6:	9307      	strge	r3, [sp, #28]
 80034b8:	9307      	strlt	r3, [sp, #28]
 80034ba:	bfb8      	it	lt
 80034bc:	9204      	strlt	r2, [sp, #16]
 80034be:	7823      	ldrb	r3, [r4, #0]
 80034c0:	2b2e      	cmp	r3, #46	; 0x2e
 80034c2:	d10c      	bne.n	80034de <_vfiprintf_r+0x176>
 80034c4:	7863      	ldrb	r3, [r4, #1]
 80034c6:	2b2a      	cmp	r3, #42	; 0x2a
 80034c8:	d135      	bne.n	8003536 <_vfiprintf_r+0x1ce>
 80034ca:	9b03      	ldr	r3, [sp, #12]
 80034cc:	1d1a      	adds	r2, r3, #4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	9203      	str	r2, [sp, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bfb8      	it	lt
 80034d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80034da:	3402      	adds	r4, #2
 80034dc:	9305      	str	r3, [sp, #20]
 80034de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80035c4 <_vfiprintf_r+0x25c>
 80034e2:	7821      	ldrb	r1, [r4, #0]
 80034e4:	2203      	movs	r2, #3
 80034e6:	4650      	mov	r0, sl
 80034e8:	f7fc fe9a 	bl	8000220 <memchr>
 80034ec:	b140      	cbz	r0, 8003500 <_vfiprintf_r+0x198>
 80034ee:	2340      	movs	r3, #64	; 0x40
 80034f0:	eba0 000a 	sub.w	r0, r0, sl
 80034f4:	fa03 f000 	lsl.w	r0, r3, r0
 80034f8:	9b04      	ldr	r3, [sp, #16]
 80034fa:	4303      	orrs	r3, r0
 80034fc:	3401      	adds	r4, #1
 80034fe:	9304      	str	r3, [sp, #16]
 8003500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003504:	482c      	ldr	r0, [pc, #176]	; (80035b8 <_vfiprintf_r+0x250>)
 8003506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800350a:	2206      	movs	r2, #6
 800350c:	f7fc fe88 	bl	8000220 <memchr>
 8003510:	2800      	cmp	r0, #0
 8003512:	d03f      	beq.n	8003594 <_vfiprintf_r+0x22c>
 8003514:	4b29      	ldr	r3, [pc, #164]	; (80035bc <_vfiprintf_r+0x254>)
 8003516:	bb1b      	cbnz	r3, 8003560 <_vfiprintf_r+0x1f8>
 8003518:	9b03      	ldr	r3, [sp, #12]
 800351a:	3307      	adds	r3, #7
 800351c:	f023 0307 	bic.w	r3, r3, #7
 8003520:	3308      	adds	r3, #8
 8003522:	9303      	str	r3, [sp, #12]
 8003524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003526:	443b      	add	r3, r7
 8003528:	9309      	str	r3, [sp, #36]	; 0x24
 800352a:	e767      	b.n	80033fc <_vfiprintf_r+0x94>
 800352c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003530:	460c      	mov	r4, r1
 8003532:	2001      	movs	r0, #1
 8003534:	e7a5      	b.n	8003482 <_vfiprintf_r+0x11a>
 8003536:	2300      	movs	r3, #0
 8003538:	3401      	adds	r4, #1
 800353a:	9305      	str	r3, [sp, #20]
 800353c:	4619      	mov	r1, r3
 800353e:	f04f 0c0a 	mov.w	ip, #10
 8003542:	4620      	mov	r0, r4
 8003544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003548:	3a30      	subs	r2, #48	; 0x30
 800354a:	2a09      	cmp	r2, #9
 800354c:	d903      	bls.n	8003556 <_vfiprintf_r+0x1ee>
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0c5      	beq.n	80034de <_vfiprintf_r+0x176>
 8003552:	9105      	str	r1, [sp, #20]
 8003554:	e7c3      	b.n	80034de <_vfiprintf_r+0x176>
 8003556:	fb0c 2101 	mla	r1, ip, r1, r2
 800355a:	4604      	mov	r4, r0
 800355c:	2301      	movs	r3, #1
 800355e:	e7f0      	b.n	8003542 <_vfiprintf_r+0x1da>
 8003560:	ab03      	add	r3, sp, #12
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	462a      	mov	r2, r5
 8003566:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <_vfiprintf_r+0x258>)
 8003568:	a904      	add	r1, sp, #16
 800356a:	4630      	mov	r0, r6
 800356c:	f3af 8000 	nop.w
 8003570:	4607      	mov	r7, r0
 8003572:	1c78      	adds	r0, r7, #1
 8003574:	d1d6      	bne.n	8003524 <_vfiprintf_r+0x1bc>
 8003576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003578:	07d9      	lsls	r1, r3, #31
 800357a:	d405      	bmi.n	8003588 <_vfiprintf_r+0x220>
 800357c:	89ab      	ldrh	r3, [r5, #12]
 800357e:	059a      	lsls	r2, r3, #22
 8003580:	d402      	bmi.n	8003588 <_vfiprintf_r+0x220>
 8003582:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003584:	f7ff fe31 	bl	80031ea <__retarget_lock_release_recursive>
 8003588:	89ab      	ldrh	r3, [r5, #12]
 800358a:	065b      	lsls	r3, r3, #25
 800358c:	f53f af12 	bmi.w	80033b4 <_vfiprintf_r+0x4c>
 8003590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003592:	e711      	b.n	80033b8 <_vfiprintf_r+0x50>
 8003594:	ab03      	add	r3, sp, #12
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	462a      	mov	r2, r5
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <_vfiprintf_r+0x258>)
 800359c:	a904      	add	r1, sp, #16
 800359e:	4630      	mov	r0, r6
 80035a0:	f000 f880 	bl	80036a4 <_printf_i>
 80035a4:	e7e4      	b.n	8003570 <_vfiprintf_r+0x208>
 80035a6:	bf00      	nop
 80035a8:	08003f7c 	.word	0x08003f7c
 80035ac:	08003f9c 	.word	0x08003f9c
 80035b0:	08003f5c 	.word	0x08003f5c
 80035b4:	08003fbc 	.word	0x08003fbc
 80035b8:	08003fc6 	.word	0x08003fc6
 80035bc:	00000000 	.word	0x00000000
 80035c0:	08003343 	.word	0x08003343
 80035c4:	08003fc2 	.word	0x08003fc2

080035c8 <_printf_common>:
 80035c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035cc:	4616      	mov	r6, r2
 80035ce:	4699      	mov	r9, r3
 80035d0:	688a      	ldr	r2, [r1, #8]
 80035d2:	690b      	ldr	r3, [r1, #16]
 80035d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035d8:	4293      	cmp	r3, r2
 80035da:	bfb8      	it	lt
 80035dc:	4613      	movlt	r3, r2
 80035de:	6033      	str	r3, [r6, #0]
 80035e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035e4:	4607      	mov	r7, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	b10a      	cbz	r2, 80035ee <_printf_common+0x26>
 80035ea:	3301      	adds	r3, #1
 80035ec:	6033      	str	r3, [r6, #0]
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	0699      	lsls	r1, r3, #26
 80035f2:	bf42      	ittt	mi
 80035f4:	6833      	ldrmi	r3, [r6, #0]
 80035f6:	3302      	addmi	r3, #2
 80035f8:	6033      	strmi	r3, [r6, #0]
 80035fa:	6825      	ldr	r5, [r4, #0]
 80035fc:	f015 0506 	ands.w	r5, r5, #6
 8003600:	d106      	bne.n	8003610 <_printf_common+0x48>
 8003602:	f104 0a19 	add.w	sl, r4, #25
 8003606:	68e3      	ldr	r3, [r4, #12]
 8003608:	6832      	ldr	r2, [r6, #0]
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	42ab      	cmp	r3, r5
 800360e:	dc26      	bgt.n	800365e <_printf_common+0x96>
 8003610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003614:	1e13      	subs	r3, r2, #0
 8003616:	6822      	ldr	r2, [r4, #0]
 8003618:	bf18      	it	ne
 800361a:	2301      	movne	r3, #1
 800361c:	0692      	lsls	r2, r2, #26
 800361e:	d42b      	bmi.n	8003678 <_printf_common+0xb0>
 8003620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003624:	4649      	mov	r1, r9
 8003626:	4638      	mov	r0, r7
 8003628:	47c0      	blx	r8
 800362a:	3001      	adds	r0, #1
 800362c:	d01e      	beq.n	800366c <_printf_common+0xa4>
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	68e5      	ldr	r5, [r4, #12]
 8003632:	6832      	ldr	r2, [r6, #0]
 8003634:	f003 0306 	and.w	r3, r3, #6
 8003638:	2b04      	cmp	r3, #4
 800363a:	bf08      	it	eq
 800363c:	1aad      	subeq	r5, r5, r2
 800363e:	68a3      	ldr	r3, [r4, #8]
 8003640:	6922      	ldr	r2, [r4, #16]
 8003642:	bf0c      	ite	eq
 8003644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003648:	2500      	movne	r5, #0
 800364a:	4293      	cmp	r3, r2
 800364c:	bfc4      	itt	gt
 800364e:	1a9b      	subgt	r3, r3, r2
 8003650:	18ed      	addgt	r5, r5, r3
 8003652:	2600      	movs	r6, #0
 8003654:	341a      	adds	r4, #26
 8003656:	42b5      	cmp	r5, r6
 8003658:	d11a      	bne.n	8003690 <_printf_common+0xc8>
 800365a:	2000      	movs	r0, #0
 800365c:	e008      	b.n	8003670 <_printf_common+0xa8>
 800365e:	2301      	movs	r3, #1
 8003660:	4652      	mov	r2, sl
 8003662:	4649      	mov	r1, r9
 8003664:	4638      	mov	r0, r7
 8003666:	47c0      	blx	r8
 8003668:	3001      	adds	r0, #1
 800366a:	d103      	bne.n	8003674 <_printf_common+0xac>
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003674:	3501      	adds	r5, #1
 8003676:	e7c6      	b.n	8003606 <_printf_common+0x3e>
 8003678:	18e1      	adds	r1, r4, r3
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	2030      	movs	r0, #48	; 0x30
 800367e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003682:	4422      	add	r2, r4
 8003684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800368c:	3302      	adds	r3, #2
 800368e:	e7c7      	b.n	8003620 <_printf_common+0x58>
 8003690:	2301      	movs	r3, #1
 8003692:	4622      	mov	r2, r4
 8003694:	4649      	mov	r1, r9
 8003696:	4638      	mov	r0, r7
 8003698:	47c0      	blx	r8
 800369a:	3001      	adds	r0, #1
 800369c:	d0e6      	beq.n	800366c <_printf_common+0xa4>
 800369e:	3601      	adds	r6, #1
 80036a0:	e7d9      	b.n	8003656 <_printf_common+0x8e>
	...

080036a4 <_printf_i>:
 80036a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	7e0f      	ldrb	r7, [r1, #24]
 80036aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036ac:	2f78      	cmp	r7, #120	; 0x78
 80036ae:	4691      	mov	r9, r2
 80036b0:	4680      	mov	r8, r0
 80036b2:	460c      	mov	r4, r1
 80036b4:	469a      	mov	sl, r3
 80036b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036ba:	d807      	bhi.n	80036cc <_printf_i+0x28>
 80036bc:	2f62      	cmp	r7, #98	; 0x62
 80036be:	d80a      	bhi.n	80036d6 <_printf_i+0x32>
 80036c0:	2f00      	cmp	r7, #0
 80036c2:	f000 80d8 	beq.w	8003876 <_printf_i+0x1d2>
 80036c6:	2f58      	cmp	r7, #88	; 0x58
 80036c8:	f000 80a3 	beq.w	8003812 <_printf_i+0x16e>
 80036cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036d4:	e03a      	b.n	800374c <_printf_i+0xa8>
 80036d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036da:	2b15      	cmp	r3, #21
 80036dc:	d8f6      	bhi.n	80036cc <_printf_i+0x28>
 80036de:	a101      	add	r1, pc, #4	; (adr r1, 80036e4 <_printf_i+0x40>)
 80036e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036e4:	0800373d 	.word	0x0800373d
 80036e8:	08003751 	.word	0x08003751
 80036ec:	080036cd 	.word	0x080036cd
 80036f0:	080036cd 	.word	0x080036cd
 80036f4:	080036cd 	.word	0x080036cd
 80036f8:	080036cd 	.word	0x080036cd
 80036fc:	08003751 	.word	0x08003751
 8003700:	080036cd 	.word	0x080036cd
 8003704:	080036cd 	.word	0x080036cd
 8003708:	080036cd 	.word	0x080036cd
 800370c:	080036cd 	.word	0x080036cd
 8003710:	0800385d 	.word	0x0800385d
 8003714:	08003781 	.word	0x08003781
 8003718:	0800383f 	.word	0x0800383f
 800371c:	080036cd 	.word	0x080036cd
 8003720:	080036cd 	.word	0x080036cd
 8003724:	0800387f 	.word	0x0800387f
 8003728:	080036cd 	.word	0x080036cd
 800372c:	08003781 	.word	0x08003781
 8003730:	080036cd 	.word	0x080036cd
 8003734:	080036cd 	.word	0x080036cd
 8003738:	08003847 	.word	0x08003847
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	1d1a      	adds	r2, r3, #4
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	602a      	str	r2, [r5, #0]
 8003744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800374c:	2301      	movs	r3, #1
 800374e:	e0a3      	b.n	8003898 <_printf_i+0x1f4>
 8003750:	6820      	ldr	r0, [r4, #0]
 8003752:	6829      	ldr	r1, [r5, #0]
 8003754:	0606      	lsls	r6, r0, #24
 8003756:	f101 0304 	add.w	r3, r1, #4
 800375a:	d50a      	bpl.n	8003772 <_printf_i+0xce>
 800375c:	680e      	ldr	r6, [r1, #0]
 800375e:	602b      	str	r3, [r5, #0]
 8003760:	2e00      	cmp	r6, #0
 8003762:	da03      	bge.n	800376c <_printf_i+0xc8>
 8003764:	232d      	movs	r3, #45	; 0x2d
 8003766:	4276      	negs	r6, r6
 8003768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800376c:	485e      	ldr	r0, [pc, #376]	; (80038e8 <_printf_i+0x244>)
 800376e:	230a      	movs	r3, #10
 8003770:	e019      	b.n	80037a6 <_printf_i+0x102>
 8003772:	680e      	ldr	r6, [r1, #0]
 8003774:	602b      	str	r3, [r5, #0]
 8003776:	f010 0f40 	tst.w	r0, #64	; 0x40
 800377a:	bf18      	it	ne
 800377c:	b236      	sxthne	r6, r6
 800377e:	e7ef      	b.n	8003760 <_printf_i+0xbc>
 8003780:	682b      	ldr	r3, [r5, #0]
 8003782:	6820      	ldr	r0, [r4, #0]
 8003784:	1d19      	adds	r1, r3, #4
 8003786:	6029      	str	r1, [r5, #0]
 8003788:	0601      	lsls	r1, r0, #24
 800378a:	d501      	bpl.n	8003790 <_printf_i+0xec>
 800378c:	681e      	ldr	r6, [r3, #0]
 800378e:	e002      	b.n	8003796 <_printf_i+0xf2>
 8003790:	0646      	lsls	r6, r0, #25
 8003792:	d5fb      	bpl.n	800378c <_printf_i+0xe8>
 8003794:	881e      	ldrh	r6, [r3, #0]
 8003796:	4854      	ldr	r0, [pc, #336]	; (80038e8 <_printf_i+0x244>)
 8003798:	2f6f      	cmp	r7, #111	; 0x6f
 800379a:	bf0c      	ite	eq
 800379c:	2308      	moveq	r3, #8
 800379e:	230a      	movne	r3, #10
 80037a0:	2100      	movs	r1, #0
 80037a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037a6:	6865      	ldr	r5, [r4, #4]
 80037a8:	60a5      	str	r5, [r4, #8]
 80037aa:	2d00      	cmp	r5, #0
 80037ac:	bfa2      	ittt	ge
 80037ae:	6821      	ldrge	r1, [r4, #0]
 80037b0:	f021 0104 	bicge.w	r1, r1, #4
 80037b4:	6021      	strge	r1, [r4, #0]
 80037b6:	b90e      	cbnz	r6, 80037bc <_printf_i+0x118>
 80037b8:	2d00      	cmp	r5, #0
 80037ba:	d04d      	beq.n	8003858 <_printf_i+0x1b4>
 80037bc:	4615      	mov	r5, r2
 80037be:	fbb6 f1f3 	udiv	r1, r6, r3
 80037c2:	fb03 6711 	mls	r7, r3, r1, r6
 80037c6:	5dc7      	ldrb	r7, [r0, r7]
 80037c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037cc:	4637      	mov	r7, r6
 80037ce:	42bb      	cmp	r3, r7
 80037d0:	460e      	mov	r6, r1
 80037d2:	d9f4      	bls.n	80037be <_printf_i+0x11a>
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d10b      	bne.n	80037f0 <_printf_i+0x14c>
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	07de      	lsls	r6, r3, #31
 80037dc:	d508      	bpl.n	80037f0 <_printf_i+0x14c>
 80037de:	6923      	ldr	r3, [r4, #16]
 80037e0:	6861      	ldr	r1, [r4, #4]
 80037e2:	4299      	cmp	r1, r3
 80037e4:	bfde      	ittt	le
 80037e6:	2330      	movle	r3, #48	; 0x30
 80037e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037f0:	1b52      	subs	r2, r2, r5
 80037f2:	6122      	str	r2, [r4, #16]
 80037f4:	f8cd a000 	str.w	sl, [sp]
 80037f8:	464b      	mov	r3, r9
 80037fa:	aa03      	add	r2, sp, #12
 80037fc:	4621      	mov	r1, r4
 80037fe:	4640      	mov	r0, r8
 8003800:	f7ff fee2 	bl	80035c8 <_printf_common>
 8003804:	3001      	adds	r0, #1
 8003806:	d14c      	bne.n	80038a2 <_printf_i+0x1fe>
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	b004      	add	sp, #16
 800380e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003812:	4835      	ldr	r0, [pc, #212]	; (80038e8 <_printf_i+0x244>)
 8003814:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003818:	6829      	ldr	r1, [r5, #0]
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003820:	6029      	str	r1, [r5, #0]
 8003822:	061d      	lsls	r5, r3, #24
 8003824:	d514      	bpl.n	8003850 <_printf_i+0x1ac>
 8003826:	07df      	lsls	r7, r3, #31
 8003828:	bf44      	itt	mi
 800382a:	f043 0320 	orrmi.w	r3, r3, #32
 800382e:	6023      	strmi	r3, [r4, #0]
 8003830:	b91e      	cbnz	r6, 800383a <_printf_i+0x196>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	f023 0320 	bic.w	r3, r3, #32
 8003838:	6023      	str	r3, [r4, #0]
 800383a:	2310      	movs	r3, #16
 800383c:	e7b0      	b.n	80037a0 <_printf_i+0xfc>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	f043 0320 	orr.w	r3, r3, #32
 8003844:	6023      	str	r3, [r4, #0]
 8003846:	2378      	movs	r3, #120	; 0x78
 8003848:	4828      	ldr	r0, [pc, #160]	; (80038ec <_printf_i+0x248>)
 800384a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800384e:	e7e3      	b.n	8003818 <_printf_i+0x174>
 8003850:	0659      	lsls	r1, r3, #25
 8003852:	bf48      	it	mi
 8003854:	b2b6      	uxthmi	r6, r6
 8003856:	e7e6      	b.n	8003826 <_printf_i+0x182>
 8003858:	4615      	mov	r5, r2
 800385a:	e7bb      	b.n	80037d4 <_printf_i+0x130>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	6826      	ldr	r6, [r4, #0]
 8003860:	6961      	ldr	r1, [r4, #20]
 8003862:	1d18      	adds	r0, r3, #4
 8003864:	6028      	str	r0, [r5, #0]
 8003866:	0635      	lsls	r5, r6, #24
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	d501      	bpl.n	8003870 <_printf_i+0x1cc>
 800386c:	6019      	str	r1, [r3, #0]
 800386e:	e002      	b.n	8003876 <_printf_i+0x1d2>
 8003870:	0670      	lsls	r0, r6, #25
 8003872:	d5fb      	bpl.n	800386c <_printf_i+0x1c8>
 8003874:	8019      	strh	r1, [r3, #0]
 8003876:	2300      	movs	r3, #0
 8003878:	6123      	str	r3, [r4, #16]
 800387a:	4615      	mov	r5, r2
 800387c:	e7ba      	b.n	80037f4 <_printf_i+0x150>
 800387e:	682b      	ldr	r3, [r5, #0]
 8003880:	1d1a      	adds	r2, r3, #4
 8003882:	602a      	str	r2, [r5, #0]
 8003884:	681d      	ldr	r5, [r3, #0]
 8003886:	6862      	ldr	r2, [r4, #4]
 8003888:	2100      	movs	r1, #0
 800388a:	4628      	mov	r0, r5
 800388c:	f7fc fcc8 	bl	8000220 <memchr>
 8003890:	b108      	cbz	r0, 8003896 <_printf_i+0x1f2>
 8003892:	1b40      	subs	r0, r0, r5
 8003894:	6060      	str	r0, [r4, #4]
 8003896:	6863      	ldr	r3, [r4, #4]
 8003898:	6123      	str	r3, [r4, #16]
 800389a:	2300      	movs	r3, #0
 800389c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a0:	e7a8      	b.n	80037f4 <_printf_i+0x150>
 80038a2:	6923      	ldr	r3, [r4, #16]
 80038a4:	462a      	mov	r2, r5
 80038a6:	4649      	mov	r1, r9
 80038a8:	4640      	mov	r0, r8
 80038aa:	47d0      	blx	sl
 80038ac:	3001      	adds	r0, #1
 80038ae:	d0ab      	beq.n	8003808 <_printf_i+0x164>
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	079b      	lsls	r3, r3, #30
 80038b4:	d413      	bmi.n	80038de <_printf_i+0x23a>
 80038b6:	68e0      	ldr	r0, [r4, #12]
 80038b8:	9b03      	ldr	r3, [sp, #12]
 80038ba:	4298      	cmp	r0, r3
 80038bc:	bfb8      	it	lt
 80038be:	4618      	movlt	r0, r3
 80038c0:	e7a4      	b.n	800380c <_printf_i+0x168>
 80038c2:	2301      	movs	r3, #1
 80038c4:	4632      	mov	r2, r6
 80038c6:	4649      	mov	r1, r9
 80038c8:	4640      	mov	r0, r8
 80038ca:	47d0      	blx	sl
 80038cc:	3001      	adds	r0, #1
 80038ce:	d09b      	beq.n	8003808 <_printf_i+0x164>
 80038d0:	3501      	adds	r5, #1
 80038d2:	68e3      	ldr	r3, [r4, #12]
 80038d4:	9903      	ldr	r1, [sp, #12]
 80038d6:	1a5b      	subs	r3, r3, r1
 80038d8:	42ab      	cmp	r3, r5
 80038da:	dcf2      	bgt.n	80038c2 <_printf_i+0x21e>
 80038dc:	e7eb      	b.n	80038b6 <_printf_i+0x212>
 80038de:	2500      	movs	r5, #0
 80038e0:	f104 0619 	add.w	r6, r4, #25
 80038e4:	e7f5      	b.n	80038d2 <_printf_i+0x22e>
 80038e6:	bf00      	nop
 80038e8:	08003fcd 	.word	0x08003fcd
 80038ec:	08003fde 	.word	0x08003fde

080038f0 <_sbrk_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	4d06      	ldr	r5, [pc, #24]	; (800390c <_sbrk_r+0x1c>)
 80038f4:	2300      	movs	r3, #0
 80038f6:	4604      	mov	r4, r0
 80038f8:	4608      	mov	r0, r1
 80038fa:	602b      	str	r3, [r5, #0]
 80038fc:	f7fd f996 	bl	8000c2c <_sbrk>
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	d102      	bne.n	800390a <_sbrk_r+0x1a>
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	b103      	cbz	r3, 800390a <_sbrk_r+0x1a>
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	bd38      	pop	{r3, r4, r5, pc}
 800390c:	200000f4 	.word	0x200000f4

08003910 <__sread>:
 8003910:	b510      	push	{r4, lr}
 8003912:	460c      	mov	r4, r1
 8003914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003918:	f000 fab2 	bl	8003e80 <_read_r>
 800391c:	2800      	cmp	r0, #0
 800391e:	bfab      	itete	ge
 8003920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003922:	89a3      	ldrhlt	r3, [r4, #12]
 8003924:	181b      	addge	r3, r3, r0
 8003926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800392a:	bfac      	ite	ge
 800392c:	6563      	strge	r3, [r4, #84]	; 0x54
 800392e:	81a3      	strhlt	r3, [r4, #12]
 8003930:	bd10      	pop	{r4, pc}

08003932 <__swrite>:
 8003932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003936:	461f      	mov	r7, r3
 8003938:	898b      	ldrh	r3, [r1, #12]
 800393a:	05db      	lsls	r3, r3, #23
 800393c:	4605      	mov	r5, r0
 800393e:	460c      	mov	r4, r1
 8003940:	4616      	mov	r6, r2
 8003942:	d505      	bpl.n	8003950 <__swrite+0x1e>
 8003944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003948:	2302      	movs	r3, #2
 800394a:	2200      	movs	r2, #0
 800394c:	f000 f9c8 	bl	8003ce0 <_lseek_r>
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800395a:	81a3      	strh	r3, [r4, #12]
 800395c:	4632      	mov	r2, r6
 800395e:	463b      	mov	r3, r7
 8003960:	4628      	mov	r0, r5
 8003962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003966:	f000 b869 	b.w	8003a3c <_write_r>

0800396a <__sseek>:
 800396a:	b510      	push	{r4, lr}
 800396c:	460c      	mov	r4, r1
 800396e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003972:	f000 f9b5 	bl	8003ce0 <_lseek_r>
 8003976:	1c43      	adds	r3, r0, #1
 8003978:	89a3      	ldrh	r3, [r4, #12]
 800397a:	bf15      	itete	ne
 800397c:	6560      	strne	r0, [r4, #84]	; 0x54
 800397e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003986:	81a3      	strheq	r3, [r4, #12]
 8003988:	bf18      	it	ne
 800398a:	81a3      	strhne	r3, [r4, #12]
 800398c:	bd10      	pop	{r4, pc}

0800398e <__sclose>:
 800398e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003992:	f000 b8d3 	b.w	8003b3c <_close_r>
	...

08003998 <__swbuf_r>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	460e      	mov	r6, r1
 800399c:	4614      	mov	r4, r2
 800399e:	4605      	mov	r5, r0
 80039a0:	b118      	cbz	r0, 80039aa <__swbuf_r+0x12>
 80039a2:	6983      	ldr	r3, [r0, #24]
 80039a4:	b90b      	cbnz	r3, 80039aa <__swbuf_r+0x12>
 80039a6:	f7ff fb81 	bl	80030ac <__sinit>
 80039aa:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <__swbuf_r+0x98>)
 80039ac:	429c      	cmp	r4, r3
 80039ae:	d12b      	bne.n	8003a08 <__swbuf_r+0x70>
 80039b0:	686c      	ldr	r4, [r5, #4]
 80039b2:	69a3      	ldr	r3, [r4, #24]
 80039b4:	60a3      	str	r3, [r4, #8]
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	071a      	lsls	r2, r3, #28
 80039ba:	d52f      	bpl.n	8003a1c <__swbuf_r+0x84>
 80039bc:	6923      	ldr	r3, [r4, #16]
 80039be:	b36b      	cbz	r3, 8003a1c <__swbuf_r+0x84>
 80039c0:	6923      	ldr	r3, [r4, #16]
 80039c2:	6820      	ldr	r0, [r4, #0]
 80039c4:	1ac0      	subs	r0, r0, r3
 80039c6:	6963      	ldr	r3, [r4, #20]
 80039c8:	b2f6      	uxtb	r6, r6
 80039ca:	4283      	cmp	r3, r0
 80039cc:	4637      	mov	r7, r6
 80039ce:	dc04      	bgt.n	80039da <__swbuf_r+0x42>
 80039d0:	4621      	mov	r1, r4
 80039d2:	4628      	mov	r0, r5
 80039d4:	f000 f948 	bl	8003c68 <_fflush_r>
 80039d8:	bb30      	cbnz	r0, 8003a28 <__swbuf_r+0x90>
 80039da:	68a3      	ldr	r3, [r4, #8]
 80039dc:	3b01      	subs	r3, #1
 80039de:	60a3      	str	r3, [r4, #8]
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	6022      	str	r2, [r4, #0]
 80039e6:	701e      	strb	r6, [r3, #0]
 80039e8:	6963      	ldr	r3, [r4, #20]
 80039ea:	3001      	adds	r0, #1
 80039ec:	4283      	cmp	r3, r0
 80039ee:	d004      	beq.n	80039fa <__swbuf_r+0x62>
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	07db      	lsls	r3, r3, #31
 80039f4:	d506      	bpl.n	8003a04 <__swbuf_r+0x6c>
 80039f6:	2e0a      	cmp	r6, #10
 80039f8:	d104      	bne.n	8003a04 <__swbuf_r+0x6c>
 80039fa:	4621      	mov	r1, r4
 80039fc:	4628      	mov	r0, r5
 80039fe:	f000 f933 	bl	8003c68 <_fflush_r>
 8003a02:	b988      	cbnz	r0, 8003a28 <__swbuf_r+0x90>
 8003a04:	4638      	mov	r0, r7
 8003a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <__swbuf_r+0x9c>)
 8003a0a:	429c      	cmp	r4, r3
 8003a0c:	d101      	bne.n	8003a12 <__swbuf_r+0x7a>
 8003a0e:	68ac      	ldr	r4, [r5, #8]
 8003a10:	e7cf      	b.n	80039b2 <__swbuf_r+0x1a>
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <__swbuf_r+0xa0>)
 8003a14:	429c      	cmp	r4, r3
 8003a16:	bf08      	it	eq
 8003a18:	68ec      	ldreq	r4, [r5, #12]
 8003a1a:	e7ca      	b.n	80039b2 <__swbuf_r+0x1a>
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	4628      	mov	r0, r5
 8003a20:	f000 f81e 	bl	8003a60 <__swsetup_r>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d0cb      	beq.n	80039c0 <__swbuf_r+0x28>
 8003a28:	f04f 37ff 	mov.w	r7, #4294967295
 8003a2c:	e7ea      	b.n	8003a04 <__swbuf_r+0x6c>
 8003a2e:	bf00      	nop
 8003a30:	08003f7c 	.word	0x08003f7c
 8003a34:	08003f9c 	.word	0x08003f9c
 8003a38:	08003f5c 	.word	0x08003f5c

08003a3c <_write_r>:
 8003a3c:	b538      	push	{r3, r4, r5, lr}
 8003a3e:	4d07      	ldr	r5, [pc, #28]	; (8003a5c <_write_r+0x20>)
 8003a40:	4604      	mov	r4, r0
 8003a42:	4608      	mov	r0, r1
 8003a44:	4611      	mov	r1, r2
 8003a46:	2200      	movs	r2, #0
 8003a48:	602a      	str	r2, [r5, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f7fd f82c 	bl	8000aa8 <_write>
 8003a50:	1c43      	adds	r3, r0, #1
 8003a52:	d102      	bne.n	8003a5a <_write_r+0x1e>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	b103      	cbz	r3, 8003a5a <_write_r+0x1e>
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	bd38      	pop	{r3, r4, r5, pc}
 8003a5c:	200000f4 	.word	0x200000f4

08003a60 <__swsetup_r>:
 8003a60:	4b32      	ldr	r3, [pc, #200]	; (8003b2c <__swsetup_r+0xcc>)
 8003a62:	b570      	push	{r4, r5, r6, lr}
 8003a64:	681d      	ldr	r5, [r3, #0]
 8003a66:	4606      	mov	r6, r0
 8003a68:	460c      	mov	r4, r1
 8003a6a:	b125      	cbz	r5, 8003a76 <__swsetup_r+0x16>
 8003a6c:	69ab      	ldr	r3, [r5, #24]
 8003a6e:	b913      	cbnz	r3, 8003a76 <__swsetup_r+0x16>
 8003a70:	4628      	mov	r0, r5
 8003a72:	f7ff fb1b 	bl	80030ac <__sinit>
 8003a76:	4b2e      	ldr	r3, [pc, #184]	; (8003b30 <__swsetup_r+0xd0>)
 8003a78:	429c      	cmp	r4, r3
 8003a7a:	d10f      	bne.n	8003a9c <__swsetup_r+0x3c>
 8003a7c:	686c      	ldr	r4, [r5, #4]
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a84:	0719      	lsls	r1, r3, #28
 8003a86:	d42c      	bmi.n	8003ae2 <__swsetup_r+0x82>
 8003a88:	06dd      	lsls	r5, r3, #27
 8003a8a:	d411      	bmi.n	8003ab0 <__swsetup_r+0x50>
 8003a8c:	2309      	movs	r3, #9
 8003a8e:	6033      	str	r3, [r6, #0]
 8003a90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a94:	81a3      	strh	r3, [r4, #12]
 8003a96:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9a:	e03e      	b.n	8003b1a <__swsetup_r+0xba>
 8003a9c:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <__swsetup_r+0xd4>)
 8003a9e:	429c      	cmp	r4, r3
 8003aa0:	d101      	bne.n	8003aa6 <__swsetup_r+0x46>
 8003aa2:	68ac      	ldr	r4, [r5, #8]
 8003aa4:	e7eb      	b.n	8003a7e <__swsetup_r+0x1e>
 8003aa6:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <__swsetup_r+0xd8>)
 8003aa8:	429c      	cmp	r4, r3
 8003aaa:	bf08      	it	eq
 8003aac:	68ec      	ldreq	r4, [r5, #12]
 8003aae:	e7e6      	b.n	8003a7e <__swsetup_r+0x1e>
 8003ab0:	0758      	lsls	r0, r3, #29
 8003ab2:	d512      	bpl.n	8003ada <__swsetup_r+0x7a>
 8003ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ab6:	b141      	cbz	r1, 8003aca <__swsetup_r+0x6a>
 8003ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003abc:	4299      	cmp	r1, r3
 8003abe:	d002      	beq.n	8003ac6 <__swsetup_r+0x66>
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	f000 f991 	bl	8003de8 <_free_r>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	6363      	str	r3, [r4, #52]	; 0x34
 8003aca:	89a3      	ldrh	r3, [r4, #12]
 8003acc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ad0:	81a3      	strh	r3, [r4, #12]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6063      	str	r3, [r4, #4]
 8003ad6:	6923      	ldr	r3, [r4, #16]
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	89a3      	ldrh	r3, [r4, #12]
 8003adc:	f043 0308 	orr.w	r3, r3, #8
 8003ae0:	81a3      	strh	r3, [r4, #12]
 8003ae2:	6923      	ldr	r3, [r4, #16]
 8003ae4:	b94b      	cbnz	r3, 8003afa <__swsetup_r+0x9a>
 8003ae6:	89a3      	ldrh	r3, [r4, #12]
 8003ae8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af0:	d003      	beq.n	8003afa <__swsetup_r+0x9a>
 8003af2:	4621      	mov	r1, r4
 8003af4:	4630      	mov	r0, r6
 8003af6:	f000 f92b 	bl	8003d50 <__smakebuf_r>
 8003afa:	89a0      	ldrh	r0, [r4, #12]
 8003afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b00:	f010 0301 	ands.w	r3, r0, #1
 8003b04:	d00a      	beq.n	8003b1c <__swsetup_r+0xbc>
 8003b06:	2300      	movs	r3, #0
 8003b08:	60a3      	str	r3, [r4, #8]
 8003b0a:	6963      	ldr	r3, [r4, #20]
 8003b0c:	425b      	negs	r3, r3
 8003b0e:	61a3      	str	r3, [r4, #24]
 8003b10:	6923      	ldr	r3, [r4, #16]
 8003b12:	b943      	cbnz	r3, 8003b26 <__swsetup_r+0xc6>
 8003b14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b18:	d1ba      	bne.n	8003a90 <__swsetup_r+0x30>
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	0781      	lsls	r1, r0, #30
 8003b1e:	bf58      	it	pl
 8003b20:	6963      	ldrpl	r3, [r4, #20]
 8003b22:	60a3      	str	r3, [r4, #8]
 8003b24:	e7f4      	b.n	8003b10 <__swsetup_r+0xb0>
 8003b26:	2000      	movs	r0, #0
 8003b28:	e7f7      	b.n	8003b1a <__swsetup_r+0xba>
 8003b2a:	bf00      	nop
 8003b2c:	2000000c 	.word	0x2000000c
 8003b30:	08003f7c 	.word	0x08003f7c
 8003b34:	08003f9c 	.word	0x08003f9c
 8003b38:	08003f5c 	.word	0x08003f5c

08003b3c <_close_r>:
 8003b3c:	b538      	push	{r3, r4, r5, lr}
 8003b3e:	4d06      	ldr	r5, [pc, #24]	; (8003b58 <_close_r+0x1c>)
 8003b40:	2300      	movs	r3, #0
 8003b42:	4604      	mov	r4, r0
 8003b44:	4608      	mov	r0, r1
 8003b46:	602b      	str	r3, [r5, #0]
 8003b48:	f7fd f83b 	bl	8000bc2 <_close>
 8003b4c:	1c43      	adds	r3, r0, #1
 8003b4e:	d102      	bne.n	8003b56 <_close_r+0x1a>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	b103      	cbz	r3, 8003b56 <_close_r+0x1a>
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	bd38      	pop	{r3, r4, r5, pc}
 8003b58:	200000f4 	.word	0x200000f4

08003b5c <__sflush_r>:
 8003b5c:	898a      	ldrh	r2, [r1, #12]
 8003b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b62:	4605      	mov	r5, r0
 8003b64:	0710      	lsls	r0, r2, #28
 8003b66:	460c      	mov	r4, r1
 8003b68:	d458      	bmi.n	8003c1c <__sflush_r+0xc0>
 8003b6a:	684b      	ldr	r3, [r1, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	dc05      	bgt.n	8003b7c <__sflush_r+0x20>
 8003b70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	dc02      	bgt.n	8003b7c <__sflush_r+0x20>
 8003b76:	2000      	movs	r0, #0
 8003b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b7e:	2e00      	cmp	r6, #0
 8003b80:	d0f9      	beq.n	8003b76 <__sflush_r+0x1a>
 8003b82:	2300      	movs	r3, #0
 8003b84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b88:	682f      	ldr	r7, [r5, #0]
 8003b8a:	602b      	str	r3, [r5, #0]
 8003b8c:	d032      	beq.n	8003bf4 <__sflush_r+0x98>
 8003b8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	075a      	lsls	r2, r3, #29
 8003b94:	d505      	bpl.n	8003ba2 <__sflush_r+0x46>
 8003b96:	6863      	ldr	r3, [r4, #4]
 8003b98:	1ac0      	subs	r0, r0, r3
 8003b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b9c:	b10b      	cbz	r3, 8003ba2 <__sflush_r+0x46>
 8003b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ba0:	1ac0      	subs	r0, r0, r3
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ba8:	6a21      	ldr	r1, [r4, #32]
 8003baa:	4628      	mov	r0, r5
 8003bac:	47b0      	blx	r6
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	d106      	bne.n	8003bc2 <__sflush_r+0x66>
 8003bb4:	6829      	ldr	r1, [r5, #0]
 8003bb6:	291d      	cmp	r1, #29
 8003bb8:	d82c      	bhi.n	8003c14 <__sflush_r+0xb8>
 8003bba:	4a2a      	ldr	r2, [pc, #168]	; (8003c64 <__sflush_r+0x108>)
 8003bbc:	40ca      	lsrs	r2, r1
 8003bbe:	07d6      	lsls	r6, r2, #31
 8003bc0:	d528      	bpl.n	8003c14 <__sflush_r+0xb8>
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	6062      	str	r2, [r4, #4]
 8003bc6:	04d9      	lsls	r1, r3, #19
 8003bc8:	6922      	ldr	r2, [r4, #16]
 8003bca:	6022      	str	r2, [r4, #0]
 8003bcc:	d504      	bpl.n	8003bd8 <__sflush_r+0x7c>
 8003bce:	1c42      	adds	r2, r0, #1
 8003bd0:	d101      	bne.n	8003bd6 <__sflush_r+0x7a>
 8003bd2:	682b      	ldr	r3, [r5, #0]
 8003bd4:	b903      	cbnz	r3, 8003bd8 <__sflush_r+0x7c>
 8003bd6:	6560      	str	r0, [r4, #84]	; 0x54
 8003bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bda:	602f      	str	r7, [r5, #0]
 8003bdc:	2900      	cmp	r1, #0
 8003bde:	d0ca      	beq.n	8003b76 <__sflush_r+0x1a>
 8003be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003be4:	4299      	cmp	r1, r3
 8003be6:	d002      	beq.n	8003bee <__sflush_r+0x92>
 8003be8:	4628      	mov	r0, r5
 8003bea:	f000 f8fd 	bl	8003de8 <_free_r>
 8003bee:	2000      	movs	r0, #0
 8003bf0:	6360      	str	r0, [r4, #52]	; 0x34
 8003bf2:	e7c1      	b.n	8003b78 <__sflush_r+0x1c>
 8003bf4:	6a21      	ldr	r1, [r4, #32]
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	47b0      	blx	r6
 8003bfc:	1c41      	adds	r1, r0, #1
 8003bfe:	d1c7      	bne.n	8003b90 <__sflush_r+0x34>
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0c4      	beq.n	8003b90 <__sflush_r+0x34>
 8003c06:	2b1d      	cmp	r3, #29
 8003c08:	d001      	beq.n	8003c0e <__sflush_r+0xb2>
 8003c0a:	2b16      	cmp	r3, #22
 8003c0c:	d101      	bne.n	8003c12 <__sflush_r+0xb6>
 8003c0e:	602f      	str	r7, [r5, #0]
 8003c10:	e7b1      	b.n	8003b76 <__sflush_r+0x1a>
 8003c12:	89a3      	ldrh	r3, [r4, #12]
 8003c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c18:	81a3      	strh	r3, [r4, #12]
 8003c1a:	e7ad      	b.n	8003b78 <__sflush_r+0x1c>
 8003c1c:	690f      	ldr	r7, [r1, #16]
 8003c1e:	2f00      	cmp	r7, #0
 8003c20:	d0a9      	beq.n	8003b76 <__sflush_r+0x1a>
 8003c22:	0793      	lsls	r3, r2, #30
 8003c24:	680e      	ldr	r6, [r1, #0]
 8003c26:	bf08      	it	eq
 8003c28:	694b      	ldreq	r3, [r1, #20]
 8003c2a:	600f      	str	r7, [r1, #0]
 8003c2c:	bf18      	it	ne
 8003c2e:	2300      	movne	r3, #0
 8003c30:	eba6 0807 	sub.w	r8, r6, r7
 8003c34:	608b      	str	r3, [r1, #8]
 8003c36:	f1b8 0f00 	cmp.w	r8, #0
 8003c3a:	dd9c      	ble.n	8003b76 <__sflush_r+0x1a>
 8003c3c:	6a21      	ldr	r1, [r4, #32]
 8003c3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c40:	4643      	mov	r3, r8
 8003c42:	463a      	mov	r2, r7
 8003c44:	4628      	mov	r0, r5
 8003c46:	47b0      	blx	r6
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	dc06      	bgt.n	8003c5a <__sflush_r+0xfe>
 8003c4c:	89a3      	ldrh	r3, [r4, #12]
 8003c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c52:	81a3      	strh	r3, [r4, #12]
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	e78e      	b.n	8003b78 <__sflush_r+0x1c>
 8003c5a:	4407      	add	r7, r0
 8003c5c:	eba8 0800 	sub.w	r8, r8, r0
 8003c60:	e7e9      	b.n	8003c36 <__sflush_r+0xda>
 8003c62:	bf00      	nop
 8003c64:	20400001 	.word	0x20400001

08003c68 <_fflush_r>:
 8003c68:	b538      	push	{r3, r4, r5, lr}
 8003c6a:	690b      	ldr	r3, [r1, #16]
 8003c6c:	4605      	mov	r5, r0
 8003c6e:	460c      	mov	r4, r1
 8003c70:	b913      	cbnz	r3, 8003c78 <_fflush_r+0x10>
 8003c72:	2500      	movs	r5, #0
 8003c74:	4628      	mov	r0, r5
 8003c76:	bd38      	pop	{r3, r4, r5, pc}
 8003c78:	b118      	cbz	r0, 8003c82 <_fflush_r+0x1a>
 8003c7a:	6983      	ldr	r3, [r0, #24]
 8003c7c:	b90b      	cbnz	r3, 8003c82 <_fflush_r+0x1a>
 8003c7e:	f7ff fa15 	bl	80030ac <__sinit>
 8003c82:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <_fflush_r+0x6c>)
 8003c84:	429c      	cmp	r4, r3
 8003c86:	d11b      	bne.n	8003cc0 <_fflush_r+0x58>
 8003c88:	686c      	ldr	r4, [r5, #4]
 8003c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ef      	beq.n	8003c72 <_fflush_r+0xa>
 8003c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c94:	07d0      	lsls	r0, r2, #31
 8003c96:	d404      	bmi.n	8003ca2 <_fflush_r+0x3a>
 8003c98:	0599      	lsls	r1, r3, #22
 8003c9a:	d402      	bmi.n	8003ca2 <_fflush_r+0x3a>
 8003c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c9e:	f7ff faa3 	bl	80031e8 <__retarget_lock_acquire_recursive>
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	f7ff ff59 	bl	8003b5c <__sflush_r>
 8003caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cac:	07da      	lsls	r2, r3, #31
 8003cae:	4605      	mov	r5, r0
 8003cb0:	d4e0      	bmi.n	8003c74 <_fflush_r+0xc>
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	059b      	lsls	r3, r3, #22
 8003cb6:	d4dd      	bmi.n	8003c74 <_fflush_r+0xc>
 8003cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cba:	f7ff fa96 	bl	80031ea <__retarget_lock_release_recursive>
 8003cbe:	e7d9      	b.n	8003c74 <_fflush_r+0xc>
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <_fflush_r+0x70>)
 8003cc2:	429c      	cmp	r4, r3
 8003cc4:	d101      	bne.n	8003cca <_fflush_r+0x62>
 8003cc6:	68ac      	ldr	r4, [r5, #8]
 8003cc8:	e7df      	b.n	8003c8a <_fflush_r+0x22>
 8003cca:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <_fflush_r+0x74>)
 8003ccc:	429c      	cmp	r4, r3
 8003cce:	bf08      	it	eq
 8003cd0:	68ec      	ldreq	r4, [r5, #12]
 8003cd2:	e7da      	b.n	8003c8a <_fflush_r+0x22>
 8003cd4:	08003f7c 	.word	0x08003f7c
 8003cd8:	08003f9c 	.word	0x08003f9c
 8003cdc:	08003f5c 	.word	0x08003f5c

08003ce0 <_lseek_r>:
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	4d07      	ldr	r5, [pc, #28]	; (8003d00 <_lseek_r+0x20>)
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	4608      	mov	r0, r1
 8003ce8:	4611      	mov	r1, r2
 8003cea:	2200      	movs	r2, #0
 8003cec:	602a      	str	r2, [r5, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f7fc ff8e 	bl	8000c10 <_lseek>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d102      	bne.n	8003cfe <_lseek_r+0x1e>
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	b103      	cbz	r3, 8003cfe <_lseek_r+0x1e>
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	bd38      	pop	{r3, r4, r5, pc}
 8003d00:	200000f4 	.word	0x200000f4

08003d04 <__swhatbuf_r>:
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	460e      	mov	r6, r1
 8003d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d0c:	2900      	cmp	r1, #0
 8003d0e:	b096      	sub	sp, #88	; 0x58
 8003d10:	4614      	mov	r4, r2
 8003d12:	461d      	mov	r5, r3
 8003d14:	da08      	bge.n	8003d28 <__swhatbuf_r+0x24>
 8003d16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	602a      	str	r2, [r5, #0]
 8003d1e:	061a      	lsls	r2, r3, #24
 8003d20:	d410      	bmi.n	8003d44 <__swhatbuf_r+0x40>
 8003d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d26:	e00e      	b.n	8003d46 <__swhatbuf_r+0x42>
 8003d28:	466a      	mov	r2, sp
 8003d2a:	f000 f8bb 	bl	8003ea4 <_fstat_r>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	dbf1      	blt.n	8003d16 <__swhatbuf_r+0x12>
 8003d32:	9a01      	ldr	r2, [sp, #4]
 8003d34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d3c:	425a      	negs	r2, r3
 8003d3e:	415a      	adcs	r2, r3
 8003d40:	602a      	str	r2, [r5, #0]
 8003d42:	e7ee      	b.n	8003d22 <__swhatbuf_r+0x1e>
 8003d44:	2340      	movs	r3, #64	; 0x40
 8003d46:	2000      	movs	r0, #0
 8003d48:	6023      	str	r3, [r4, #0]
 8003d4a:	b016      	add	sp, #88	; 0x58
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d50 <__smakebuf_r>:
 8003d50:	898b      	ldrh	r3, [r1, #12]
 8003d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d54:	079d      	lsls	r5, r3, #30
 8003d56:	4606      	mov	r6, r0
 8003d58:	460c      	mov	r4, r1
 8003d5a:	d507      	bpl.n	8003d6c <__smakebuf_r+0x1c>
 8003d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d60:	6023      	str	r3, [r4, #0]
 8003d62:	6123      	str	r3, [r4, #16]
 8003d64:	2301      	movs	r3, #1
 8003d66:	6163      	str	r3, [r4, #20]
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	ab01      	add	r3, sp, #4
 8003d6e:	466a      	mov	r2, sp
 8003d70:	f7ff ffc8 	bl	8003d04 <__swhatbuf_r>
 8003d74:	9900      	ldr	r1, [sp, #0]
 8003d76:	4605      	mov	r5, r0
 8003d78:	4630      	mov	r0, r6
 8003d7a:	f7ff fa57 	bl	800322c <_malloc_r>
 8003d7e:	b948      	cbnz	r0, 8003d94 <__smakebuf_r+0x44>
 8003d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d84:	059a      	lsls	r2, r3, #22
 8003d86:	d4ef      	bmi.n	8003d68 <__smakebuf_r+0x18>
 8003d88:	f023 0303 	bic.w	r3, r3, #3
 8003d8c:	f043 0302 	orr.w	r3, r3, #2
 8003d90:	81a3      	strh	r3, [r4, #12]
 8003d92:	e7e3      	b.n	8003d5c <__smakebuf_r+0xc>
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <__smakebuf_r+0x7c>)
 8003d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	6020      	str	r0, [r4, #0]
 8003d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da0:	81a3      	strh	r3, [r4, #12]
 8003da2:	9b00      	ldr	r3, [sp, #0]
 8003da4:	6163      	str	r3, [r4, #20]
 8003da6:	9b01      	ldr	r3, [sp, #4]
 8003da8:	6120      	str	r0, [r4, #16]
 8003daa:	b15b      	cbz	r3, 8003dc4 <__smakebuf_r+0x74>
 8003dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003db0:	4630      	mov	r0, r6
 8003db2:	f000 f889 	bl	8003ec8 <_isatty_r>
 8003db6:	b128      	cbz	r0, 8003dc4 <__smakebuf_r+0x74>
 8003db8:	89a3      	ldrh	r3, [r4, #12]
 8003dba:	f023 0303 	bic.w	r3, r3, #3
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	81a3      	strh	r3, [r4, #12]
 8003dc4:	89a0      	ldrh	r0, [r4, #12]
 8003dc6:	4305      	orrs	r5, r0
 8003dc8:	81a5      	strh	r5, [r4, #12]
 8003dca:	e7cd      	b.n	8003d68 <__smakebuf_r+0x18>
 8003dcc:	08003045 	.word	0x08003045

08003dd0 <__malloc_lock>:
 8003dd0:	4801      	ldr	r0, [pc, #4]	; (8003dd8 <__malloc_lock+0x8>)
 8003dd2:	f7ff ba09 	b.w	80031e8 <__retarget_lock_acquire_recursive>
 8003dd6:	bf00      	nop
 8003dd8:	200000e8 	.word	0x200000e8

08003ddc <__malloc_unlock>:
 8003ddc:	4801      	ldr	r0, [pc, #4]	; (8003de4 <__malloc_unlock+0x8>)
 8003dde:	f7ff ba04 	b.w	80031ea <__retarget_lock_release_recursive>
 8003de2:	bf00      	nop
 8003de4:	200000e8 	.word	0x200000e8

08003de8 <_free_r>:
 8003de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dea:	2900      	cmp	r1, #0
 8003dec:	d044      	beq.n	8003e78 <_free_r+0x90>
 8003dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003df2:	9001      	str	r0, [sp, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f1a1 0404 	sub.w	r4, r1, #4
 8003dfa:	bfb8      	it	lt
 8003dfc:	18e4      	addlt	r4, r4, r3
 8003dfe:	f7ff ffe7 	bl	8003dd0 <__malloc_lock>
 8003e02:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <_free_r+0x94>)
 8003e04:	9801      	ldr	r0, [sp, #4]
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	b933      	cbnz	r3, 8003e18 <_free_r+0x30>
 8003e0a:	6063      	str	r3, [r4, #4]
 8003e0c:	6014      	str	r4, [r2, #0]
 8003e0e:	b003      	add	sp, #12
 8003e10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e14:	f7ff bfe2 	b.w	8003ddc <__malloc_unlock>
 8003e18:	42a3      	cmp	r3, r4
 8003e1a:	d908      	bls.n	8003e2e <_free_r+0x46>
 8003e1c:	6825      	ldr	r5, [r4, #0]
 8003e1e:	1961      	adds	r1, r4, r5
 8003e20:	428b      	cmp	r3, r1
 8003e22:	bf01      	itttt	eq
 8003e24:	6819      	ldreq	r1, [r3, #0]
 8003e26:	685b      	ldreq	r3, [r3, #4]
 8003e28:	1949      	addeq	r1, r1, r5
 8003e2a:	6021      	streq	r1, [r4, #0]
 8003e2c:	e7ed      	b.n	8003e0a <_free_r+0x22>
 8003e2e:	461a      	mov	r2, r3
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	b10b      	cbz	r3, 8003e38 <_free_r+0x50>
 8003e34:	42a3      	cmp	r3, r4
 8003e36:	d9fa      	bls.n	8003e2e <_free_r+0x46>
 8003e38:	6811      	ldr	r1, [r2, #0]
 8003e3a:	1855      	adds	r5, r2, r1
 8003e3c:	42a5      	cmp	r5, r4
 8003e3e:	d10b      	bne.n	8003e58 <_free_r+0x70>
 8003e40:	6824      	ldr	r4, [r4, #0]
 8003e42:	4421      	add	r1, r4
 8003e44:	1854      	adds	r4, r2, r1
 8003e46:	42a3      	cmp	r3, r4
 8003e48:	6011      	str	r1, [r2, #0]
 8003e4a:	d1e0      	bne.n	8003e0e <_free_r+0x26>
 8003e4c:	681c      	ldr	r4, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	6053      	str	r3, [r2, #4]
 8003e52:	4421      	add	r1, r4
 8003e54:	6011      	str	r1, [r2, #0]
 8003e56:	e7da      	b.n	8003e0e <_free_r+0x26>
 8003e58:	d902      	bls.n	8003e60 <_free_r+0x78>
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	6003      	str	r3, [r0, #0]
 8003e5e:	e7d6      	b.n	8003e0e <_free_r+0x26>
 8003e60:	6825      	ldr	r5, [r4, #0]
 8003e62:	1961      	adds	r1, r4, r5
 8003e64:	428b      	cmp	r3, r1
 8003e66:	bf04      	itt	eq
 8003e68:	6819      	ldreq	r1, [r3, #0]
 8003e6a:	685b      	ldreq	r3, [r3, #4]
 8003e6c:	6063      	str	r3, [r4, #4]
 8003e6e:	bf04      	itt	eq
 8003e70:	1949      	addeq	r1, r1, r5
 8003e72:	6021      	streq	r1, [r4, #0]
 8003e74:	6054      	str	r4, [r2, #4]
 8003e76:	e7ca      	b.n	8003e0e <_free_r+0x26>
 8003e78:	b003      	add	sp, #12
 8003e7a:	bd30      	pop	{r4, r5, pc}
 8003e7c:	200000ec 	.word	0x200000ec

08003e80 <_read_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4d07      	ldr	r5, [pc, #28]	; (8003ea0 <_read_r+0x20>)
 8003e84:	4604      	mov	r4, r0
 8003e86:	4608      	mov	r0, r1
 8003e88:	4611      	mov	r1, r2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	602a      	str	r2, [r5, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f7fc fe7a 	bl	8000b88 <_read>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_read_r+0x1e>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_read_r+0x1e>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	200000f4 	.word	0x200000f4

08003ea4 <_fstat_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	4d07      	ldr	r5, [pc, #28]	; (8003ec4 <_fstat_r+0x20>)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	4604      	mov	r4, r0
 8003eac:	4608      	mov	r0, r1
 8003eae:	4611      	mov	r1, r2
 8003eb0:	602b      	str	r3, [r5, #0]
 8003eb2:	f7fc fe92 	bl	8000bda <_fstat>
 8003eb6:	1c43      	adds	r3, r0, #1
 8003eb8:	d102      	bne.n	8003ec0 <_fstat_r+0x1c>
 8003eba:	682b      	ldr	r3, [r5, #0]
 8003ebc:	b103      	cbz	r3, 8003ec0 <_fstat_r+0x1c>
 8003ebe:	6023      	str	r3, [r4, #0]
 8003ec0:	bd38      	pop	{r3, r4, r5, pc}
 8003ec2:	bf00      	nop
 8003ec4:	200000f4 	.word	0x200000f4

08003ec8 <_isatty_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4d06      	ldr	r5, [pc, #24]	; (8003ee4 <_isatty_r+0x1c>)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4604      	mov	r4, r0
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	602b      	str	r3, [r5, #0]
 8003ed4:	f7fc fe91 	bl	8000bfa <_isatty>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_isatty_r+0x1a>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_isatty_r+0x1a>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	200000f4 	.word	0x200000f4

08003ee8 <_init>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	bf00      	nop
 8003eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eee:	bc08      	pop	{r3}
 8003ef0:	469e      	mov	lr, r3
 8003ef2:	4770      	bx	lr

08003ef4 <_fini>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	bf00      	nop
 8003ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efa:	bc08      	pop	{r3}
 8003efc:	469e      	mov	lr, r3
 8003efe:	4770      	bx	lr
